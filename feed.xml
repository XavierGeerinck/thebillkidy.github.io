<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.6">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2020-03-27T15:58:48+00:00</updated><id>/feed.xml</id><title type="html">Xavier Geerinck - Blog</title><subtitle>My thoughts, tutorials and learnings</subtitle><entry><title type="html">AI Battlecards - End to End Process for building and evaluating AI models</title><link href="/ai-battlecards" rel="alternate" type="text/html" title="AI Battlecards - End to End Process for building and evaluating AI models" /><published>2020-02-24T09:00:00+00:00</published><updated>2020-02-24T09:00:00+00:00</updated><id>/ai-battlecards</id><content type="html" xml:base="/ai-battlecards">&lt;p&gt;A couple of months ago it struck me that my personal knowledge in AI could be improved quite a bit. That’s why I took the time to brush up on the different concepts ranging from data gathering until the evaluation of a deployed model.&lt;/p&gt;

&lt;p&gt;While brushing up my knowledge, I also thought on how I could share this back to the community as well as have a quick overview of everything I learned with pointers and tips of where I should look at to go more in depth on a topic. Making me end up in creating the following battle cards that I hope are useful for everyone to print and use as a kind of “Cheat Sheets”.&lt;/p&gt;

&lt;p&gt;As you might notice, there is no sklearn being utilized in steps 2. This is because I wanted to make a clear distinction between a &lt;strong&gt;Data Engineer&lt;/strong&gt; and a &lt;strong&gt;Data Scientist&lt;/strong&gt;, with the following reasoning:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Data Engineer:&lt;/strong&gt; They often utilize Spark, so we want to utilize the strength and scale-out capabilities of spark, without completely relying on the head node. Therefor I utilize Pandas examples as much as possible, which can be scaled through the &lt;a href=&quot;https://github.com/databricks/koalas&quot;&gt;Koalas&lt;/a&gt; platform.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Data Scientist:&lt;/strong&gt; They often use different libraries, with sklearn being one of them.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; I realize that these are far from perfect, but I want them to be. If you encounter any remarks, please post them below and I will look at incorporating them :)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Printable Version:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/assets/images/battlecards/AI%20-%20Data%20Gathering.pdf&quot;&gt;Data Gathering&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/assets/images/battlecards/AI%20-%20Data%20Exploration.pdf&quot;&gt;Data Cleaning, Preparation and Modification&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/assets/images/battlecards/AI%20-%20Model%20Preparation%20and%20Training.pdf&quot;&gt;Model Training and Tuning&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/assets/images/battlecards/AI%20-%20Model%20Evaluation%20and%20Classification.pdf&quot;&gt;Model Evaluation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/assets/images/battlecards/Battlecards.pdf&quot;&gt;One Pager&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;step-1---data-gathering&quot;&gt;Step 1 - Data Gathering&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/battlecards/AI%20-%20Data%20Gathering.svg&quot; alt=&quot;/assets/images/battlecards/AI - Data Gathering.svg&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;step-2---data-cleaning-preparation-and-modification&quot;&gt;Step 2 - Data Cleaning, Preparation and Modification&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/battlecards/AI%20-%20Data%20Exploration.svg&quot; alt=&quot;/assets/images/battlecards/AI - Data Exploration.svg&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;step-3---model-training-and-tuning&quot;&gt;Step 3 - Model Training and Tuning&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/battlecards/AI%20-%20Model%20Preparation%20and%20Training.svg&quot; alt=&quot;/assets/images/battlecards/AI - Model Preparation and Training.svg&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;step-4---model-evaluation&quot;&gt;Step 4 - Model Evaluation&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/battlecards/AI%20-%20Model%20Evaluation%20and%20Classification.svg&quot; alt=&quot;/assets/images/battlecards/AI - Model Evaluation and Classification.svg&quot; /&gt;&lt;/p&gt;</content><author><name>Xavier Geerinck</name></author><category term="ai" /><category term="ai-ml" /><summary type="html">A couple of months ago it struck me that my personal knowledge in AI could be improved quite a bit. That’s why I took the time to brush up on the different concepts ranging from data gathering until the evaluation of a deployed model.</summary></entry><entry><title type="html">Getting started with Dapr, Python and gRPC</title><link href="/dapr-getting-started" rel="alternate" type="text/html" title="Getting started with Dapr, Python and gRPC" /><published>2020-02-17T09:00:00+00:00</published><updated>2020-02-17T09:00:00+00:00</updated><id>/dapr-getting-started</id><content type="html" xml:base="/dapr-getting-started">&lt;p&gt;The cloud war is heating up and one of the main challenges is the fear of lock-in created by these providers. Helping the raise of Kubernetes as a provider, since this allows customers to quickly move between one and the other (a deployment is a deployment, no matter the cloud you run it on.).&lt;/p&gt;

&lt;p&gt;Looking at the above, a new Runtime was created that allows customers to create applications that still allow the goodness of these cloud platforms (PaaS components), while developing their Microservices. Which is why &lt;strong&gt;&lt;a href=&quot;https://dapr.io&quot;&gt;Dapr&lt;/a&gt;&lt;/strong&gt; was born.&lt;/p&gt;

&lt;p&gt;Dapr stands for Distributed Application Runtime and provides building blocks to create a resilient, stateless or stateful microservice that can run on the cloud and edge, while still being language independent. Backed by HTTP or gRPC depending on the performance needs that you have.&lt;/p&gt;

&lt;h2 id=&quot;getting-started---installing-dapr&quot;&gt;Getting Started - Installing Dapr&lt;/h2&gt;

&lt;p&gt;Dapr was amazing to get started with! In just 5 minutes I had my first microservice running by following the &lt;a href=&quot;https://github.com/dapr/docs/blob/master/getting-started/environment-setup.md&quot;&gt;documentation&lt;/a&gt;. To setup Dapr, we can simply run:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Windows - PowerShell&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;powershell &lt;span class=&quot;nt&quot;&gt;-Command&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;iwr -useb https://raw.githubusercontent.com/dapr/cli/master/install/install.ps1 | iex&quot;&lt;/span&gt;
dapr init
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Linux&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wget &lt;span class=&quot;nt&quot;&gt;-q&lt;/span&gt; https://raw.githubusercontent.com/dapr/cli/master/install/install.sh &lt;span class=&quot;nt&quot;&gt;-O&lt;/span&gt; - | /bin/bash
dapr init
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Important:&lt;/strong&gt; When running &lt;code class=&quot;highlighter-rouge&quot;&gt;dapr init&lt;/code&gt;, dapr will take care of automatically creating your &lt;strong&gt;state store&lt;/strong&gt; under the &lt;code class=&quot;highlighter-rouge&quot;&gt;components/&lt;/code&gt; folder. We will now have 2 files called &lt;code class=&quot;highlighter-rouge&quot;&gt;messagebus.yaml&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;statestore.yaml&lt;/code&gt; that we can use to communicate with.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;getting-started---running-python-grpc-example&quot;&gt;Getting Started - Running Python gRPC Example&lt;/h2&gt;

&lt;p&gt;For low-latency requiring application, gRPC is a smart choice. It’s often used when we require inter process communication between applications, when normal HTTP overhead is not required (e.g. simulators that we want to hook up together).&lt;/p&gt;

&lt;p&gt;Luckily Dapr allows both HTTP and gRPC connectors, making our lives easier! When looking at the &lt;a href=&quot;https://github.com/dapr/docs/tree/master/howto/create-grpc-app&quot;&gt;gRPC Documentation&lt;/a&gt; we just need to specify that we are utilizing gRPC through the command line (or Kubernetes YAML file).&lt;/p&gt;

&lt;p&gt;Therefor we can get started by creating a Python example called &lt;strong&gt;server.py&lt;/strong&gt;:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;dapr&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dapr_pb2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;messages&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;dapr&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dapr_pb2_grpc&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;services&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;grpc&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;google.protobuf.any_pb2&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Any&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grpc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insecure_channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'localhost:50001'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DaprStub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Set the state
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stateStoreName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;my-state-store&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Note: see components/statestore.yaml at the metadata.name key and configure correctly
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stateReq&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;messages&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StateRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;my-first-state&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'utf-8'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;stateEnvelope&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;messages&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SaveStateEnvelope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;storeName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stateStoreName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stateReq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SaveState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stateEnvelope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Close the channel
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Which we can then start in the Dapr runtime through:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Start our server.py in Dapr on HTTP Port 50002 and gRPC Port 50001&lt;/span&gt;
dapr run &lt;span class=&quot;nt&quot;&gt;--app-id&lt;/span&gt; python-grpc &lt;span class=&quot;nt&quot;&gt;--port&lt;/span&gt; 50002 &lt;span class=&quot;nt&quot;&gt;--protocol&lt;/span&gt; grpc &lt;span class=&quot;nt&quot;&gt;--grpc-port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;50001 python server.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Instantly showing the output stating that it started and saved our state configuration.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PS F:&lt;span class=&quot;se&quot;&gt;\d&lt;/span&gt;apr&amp;gt; dapr run &lt;span class=&quot;nt&quot;&gt;--app-id&lt;/span&gt; python-grpc &lt;span class=&quot;nt&quot;&gt;--port&lt;/span&gt; 50002 &lt;span class=&quot;nt&quot;&gt;--protocol&lt;/span&gt; grpc &lt;span class=&quot;nt&quot;&gt;--grpc-port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;50001 python server.py
Starting Dapr with &lt;span class=&quot;nb&quot;&gt;id &lt;/span&gt;python-grpc. HTTP Port: 50002. gRPC Port: 50001
You&lt;span class=&quot;s1&quot;&gt;'re up and running! Both Dapr and your app logs will appear here.

== DAPR == time=&quot;2020-02-17T21:41:29+01:00&quot; level=info msg=&quot;starting Dapr Runtime -- version 0.4.0 -- commit v0.3.0-rc.0-73-ga1e270f-dirty&quot;

== DAPR == time=&quot;2020-02-17T21:41:29+01:00&quot; level=info msg=&quot;log level set to: info&quot;

== DAPR == time=&quot;2020-02-17T21:41:29+01:00&quot; level=info msg=&quot;standalone mode configured&quot;       

== DAPR == time=&quot;2020-02-17T21:41:29+01:00&quot; level=info msg=&quot;dapr id: python-grpc&quot;

== DAPR == time=&quot;2020-02-17T21:41:29+01:00&quot; level=info msg=&quot;mTLS is disabled. Skipping certificate request and tls validation&quot;

== DAPR == time=&quot;2020-02-17T21:41:29+01:00&quot; level=info msg=&quot;loaded component my-state-store (state.redis)&quot;

== DAPR == time=&quot;2020-02-17T21:41:29+01:00&quot; level=info msg=&quot;loaded component messagebus (pubsub.redis)&quot;

== DAPR == 2020-02-17 21:41:29.863654 I | redis: connecting to localhost:6379

== DAPR == 2020-02-17 21:41:29.870653 I | redis: connected to localhost:6379 (localAddr: [::1]:56504, remAddr: [::1]:6379)

== DAPR == time=&quot;2020-02-17T21:41:29+01:00&quot; level=info msg=&quot;Initialized service discovery to standalone&quot;

== DAPR == time=&quot;2020-02-17T21:41:29+01:00&quot; level=warning msg=&quot;failed to init input bindings: 
app channel not initialized&quot;

== DAPR == time=&quot;2020-02-17T21:41:29+01:00&quot; level=info msg=&quot;actor runtime started. actor idle 
timeout: 1h0m0s. actor scan interval: 30s&quot;

== DAPR == time=&quot;2020-02-17T21:41:29+01:00&quot; level=info msg=&quot;actors: starting connection attempt to placement service at localhost:6050&quot;

== DAPR == time=&quot;2020-02-17T21:41:29+01:00&quot; level=info msg=&quot;http server is running on port 50002&quot;

== DAPR == time=&quot;2020-02-17T21:41:29+01:00&quot; level=info msg=&quot;gRPC server is running on port 50001&quot;

== DAPR == time=&quot;2020-02-17T21:41:29+01:00&quot; level=info msg=&quot;local service entry announced&quot;

== DAPR == time=&quot;2020-02-17T21:41:29+01:00&quot; level=info msg=&quot;dapr initialized. Status: Running. Init Elapsed 17.0031ms&quot;

== DAPR == time=&quot;2020-02-17T21:41:29+01:00&quot; level=info msg=&quot;actors: established connection to 
placement service at localhost:6050&quot;

== DAPR == time=&quot;2020-02-17T21:41:29+01:00&quot; level=info msg=&quot;actors: placement order received: 
lock&quot;

== DAPR == time=&quot;2020-02-17T21:41:29+01:00&quot; level=info msg=&quot;actors: placement order received: 
update&quot;

== DAPR == time=&quot;2020-02-17T21:41:29+01:00&quot; level=info msg=&quot;actors: placement tables updated&quot;

== DAPR == time=&quot;2020-02-17T21:41:29+01:00&quot; level=info msg=&quot;actors: placement order received: 
unlock&quot;

== APP == Saved State
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When now checking this with the following &lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt; command, we are able to validate our state over the HTTP interface!&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl http://localhost:50002/v1.0/state/my-state-store/my-first-state
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Result:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PS F:&lt;span class=&quot;se&quot;&gt;\d&lt;/span&gt;apr&amp;gt; curl http://localhost:50002/v1.0/state/my-state-store/my-first-state       
Hello World
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And there we go, as simple as that we are now able to utilize Dapr with a state store to communicate through gRPC (which is normally something quite complex to do).&lt;/p&gt;</content><author><name>Xavier Geerinck</name></author><category term="infrastructure" /><category term="dapr" /><summary type="html">The cloud war is heating up and one of the main challenges is the fear of lock-in created by these providers. Helping the raise of Kubernetes as a provider, since this allows customers to quickly move between one and the other (a deployment is a deployment, no matter the cloud you run it on.).</summary></entry><entry><title type="html">Act in realtime on IoT Data without writing any code through Azure IoT Hub, Event Grid, Cosmos DB and Logic Apps</title><link href="/iot-hub-realtime-action-flow" rel="alternate" type="text/html" title="Act in realtime on IoT Data without writing any code through Azure IoT Hub, Event Grid, Cosmos DB and Logic Apps" /><published>2020-01-09T09:00:00+00:00</published><updated>2020-01-09T09:00:00+00:00</updated><id>/iot-hub-realtime-action-flow</id><content type="html" xml:base="/iot-hub-realtime-action-flow">&lt;p&gt;Creating a realtime application is quite trivial, you most of the time take in all the events and put a dedicated processor on there that will process the incoming events for you. But what if you would like to make things a bit more interesting and develop this entire path completely serverless without writing any code, but still ensuring a response of seconds rather than minutes?&lt;/p&gt;

&lt;p&gt;Let’s take the following use-case: “We have devices sending telemetry (temperature) and would like to send an email to ourselves once the temperature exceeds a certain threshold”. How can we do this?&lt;/p&gt;

&lt;h2 id=&quot;architecture&quot;&gt;Architecture&lt;/h2&gt;

&lt;p&gt;Decomposing this into an architecture definition, we would need to take the following requirements into account:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;No coding (thus no Azure Functions)&lt;/li&gt;
  &lt;li&gt;Serverless&lt;/li&gt;
  &lt;li&gt;Response time &amp;lt; 3 seconds&lt;/li&gt;
  &lt;li&gt;Completely managed (no IaaS)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If we take the requirements above, the following components might be sufficient:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Azure IoT Hub (as our device management and event ingestion engine)&lt;/li&gt;
  &lt;li&gt;Azure Event Grid (as the Telemetry router)&lt;/li&gt;
  &lt;li&gt;Azure Cosmos DB (as our Device Metastore that will include the location)&lt;/li&gt;
  &lt;li&gt;Azure Logic Apps (as our no-code platform that will include our logic)&lt;/li&gt;
  &lt;li&gt;Twilio Sendgrid (for our email sending needs)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Which will result in the following architecture:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/architectures/architecture-real-time-apps.svg&quot; alt=&quot;/assets/images/architectures/architecture-real-time-apps.svg&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;data-flow--data-model&quot;&gt;Data Flow / Data Model&lt;/h2&gt;

&lt;p&gt;Once we have our architecture defined, another thing we also should do upfront is to create the data flow and model that will be representing our device metadata store as well as the events coming in.&lt;/p&gt;

&lt;h3 id=&quot;device-metadata-store&quot;&gt;Device Metadata Store&lt;/h3&gt;

&lt;p&gt;Our devices are going to be registered in IoT Hub, but we also need a Metadata store containing some extra information such as the location. This way we can send which device is actually overheating at which location for example.&lt;/p&gt;

&lt;p&gt;Since we are utilizing a NoSQL store, this could look something like this:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;simulator-device&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;owner&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Xavier Geerinck&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;xavier.geerinck@gmail.com&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;country&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;BE&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Street 1, 2345 City&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;device-events-telemetry&quot;&gt;Device Events Telemetry&lt;/h3&gt;

&lt;p&gt;For the device events, this is going to look quite simple and small, so that we are able to create a low ingestion engine that could also be compatible with technologies such as LoRa or NB-IoT.&lt;/p&gt;

&lt;p&gt;Our payload could look something like this:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;deviceId&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;my-first-device&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;temperature&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;20.5&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;implementation&quot;&gt;Implementation&lt;/h2&gt;

&lt;h3 id=&quot;setting-up-our-components&quot;&gt;Setting up our components&lt;/h3&gt;

&lt;p&gt;Getting started, we always start off creating the components as described in our architecture overview diagram. We thus create the following components:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Azure IoT Hub&lt;/li&gt;
  &lt;li&gt;Azure Event Grid&lt;/li&gt;
  &lt;li&gt;Azure Cosmos DB&lt;/li&gt;
  &lt;li&gt;Azure Logic Apps&lt;/li&gt;
  &lt;li&gt;Twilio Sendgrid&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;configuring-logic-apps&quot;&gt;Configuring Logic Apps&lt;/h3&gt;

&lt;h4 id=&quot;quick-introduction&quot;&gt;Quick Introduction&lt;/h4&gt;

&lt;p&gt;Logic apps is a no-code platform that allows you to get started by just combining &lt;strong&gt;triggers&lt;/strong&gt; and &lt;strong&gt;actions&lt;/strong&gt;. As shown in the overview below.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Triggers:&lt;/strong&gt; These will trigger the logic app to start (e.g. receiving an event, a timer, a webhook, …)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Actions:&lt;/strong&gt; This is what will occur in the connector (e.g. fetching a document, deleting a document, …)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/iot-realtime-app/logic-apps-trigger.png&quot; alt=&quot;/assets/images/posts/iot-realtime-app/logic-apps-trigger.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After we run one of these actions we will need to be able to receive the response of them. This we can do through the use of “Magic Variables” that we can call in expressions. The ones we will use are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;TriggerBody()&lt;/code&gt;: Returning the output of the trigger&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Body('ActionName')&lt;/code&gt;: Returning the output of an action further in the flow&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To know what the keys are that we can utilize, we should go towards the &lt;strong&gt;Run History&lt;/strong&gt; view that will allow us to deep dive in each connector to see what was being shown in the “input” and “output”:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/iot-realtime-app/logic-app-app-run.png&quot; alt=&quot;/assets/images/posts/iot-realtime-app/logic-app-app-run.png&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;configuring-it-for-our-use-case&quot;&gt;Configuring it for our Use Case&lt;/h4&gt;

&lt;p&gt;Now let’s configure this for our use-case. We select “Event Grid” as our &lt;strong&gt;trigger&lt;/strong&gt; and “When a resource event occurs” as the &lt;strong&gt;action&lt;/strong&gt; we will take. Configuring it as shown below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/iot-realtime-app/step-1-event-grid.png&quot; alt=&quot;/assets/images/posts/iot-realtime-app/step-1-event-grid.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This will automatically set-up the connection from IoT Hub towards Event Grid for us, so that we are able to focus on more important things. From the introduction, we have now learned that we can access the output of our Event Grid Trigger through the function &lt;code class=&quot;highlighter-rouge&quot;&gt;TriggerBody()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Looking at what we got in the &lt;strong&gt;run history&lt;/strong&gt; output, we can see the JSON structure below. Which shows that IoTHub is including a body key that includes the data as a &lt;code class=&quot;highlighter-rouge&quot;&gt;base64&lt;/code&gt; string.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/iot-realtime-app/telemetry-json.png&quot; alt=&quot;/assets/images/posts/iot-realtime-app/telemetry-json.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To decode this, we can thus utilize the following expression: &lt;code class=&quot;highlighter-rouge&quot;&gt;json(decodeBase64(triggerBody()['data']['body']))&lt;/code&gt; which deserializes the base64 string and parses it as a JSON document.&lt;/p&gt;

&lt;p&gt;Continuing, we set-up our CosmosDB action. Selecting the &lt;strong&gt;Get A Document&lt;/strong&gt; (or shorted noted as &lt;code class=&quot;highlighter-rouge&quot;&gt;Get_a_Document&lt;/code&gt; since we need this for accessing the result). To help you a bit, I have listed the parameters below.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Database ID:&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;YOUR_DATABASE_ID&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Collection ID:&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;YOUR_COLLECTION_ID&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Document ID:&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;json(decodeBase64(triggerBody()['data']['body']))['deviceId']&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Partition Key Value:&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;BE&quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Resulting in:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/iot-realtime-app/step-2-cosmosdb.png&quot; alt=&quot;/assets/images/posts/iot-realtime-app/step-2-cosmosdb.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The same goes for our Condition Statement, which will focus on a value we put in (e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;temperature_pct&lt;/code&gt;) which we can compare to another value (e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;79&lt;/code&gt; as shown below).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/iot-realtime-app/step-3-condition.png&quot; alt=&quot;/assets/images/posts/iot-realtime-app/step-3-condition.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With the last step being that when the condition above is true, that we send an email to the email we fetched from CosmosDB.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Remember: you can access the CosmosDB data through &lt;code class=&quot;highlighter-rouge&quot;&gt;Body('Get_a_Document')&lt;/code&gt;, e.g.: &lt;code class=&quot;highlighter-rouge&quot;&gt;Body('Get_a_Document')['customer']['email']&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/iot-realtime-app/step-4-sendgrid.png&quot; alt=&quot;/assets/images/posts/iot-realtime-app/step-4-sendgrid.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Finally resulting in our finished flow:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/iot-realtime-app/logic-app-full.png&quot; alt=&quot;/assets/images/posts/iot-realtime-app/logic-app-full.png&quot; /&gt;&lt;/p&gt;</content><author><name>Xavier Geerinck</name></author><category term="azure" /><category term="iot" /><summary type="html">Creating a realtime application is quite trivial, you most of the time take in all the events and put a dedicated processor on there that will process the incoming events for you. But what if you would like to make things a bit more interesting and develop this entire path completely serverless without writing any code, but still ensuring a response of seconds rather than minutes?</summary></entry><entry><title type="html">Artificial Intelligence - How to measure performance - Accuracy, Precision, Recall, F1, ROC, RMSE, F-Test and R-Squared</title><link href="/ai-performance-markers" rel="alternate" type="text/html" title="Artificial Intelligence - How to measure performance - Accuracy, Precision, Recall, F1, ROC, RMSE, F-Test and R-Squared" /><published>2020-01-03T09:00:00+00:00</published><updated>2020-01-03T09:00:00+00:00</updated><id>/ai-performance-markers</id><content type="html" xml:base="/ai-performance-markers">&lt;p&gt;We currently see a lot of AI algorithms being created, but how can we actually measure the performance of these models? What are the terms we should look at to detect this?&lt;/p&gt;

&lt;p&gt;These are the questions I would like to tackle in this article. Starting from “Classification models” where we will look at metrics such as Accuracy, Precision, Recall, F1 Score and the ROC curve towards “regression models” where we will tackle the Root Mean Squared Error, F-Test and R-Squared methods.&lt;/p&gt;

&lt;h2 id=&quot;performance-in-classification-models&quot;&gt;Performance in Classification Models&lt;/h2&gt;

&lt;p&gt;Often when we are reading through papers on the internet, we see a table popping up that looks like this:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt;Accuracy&lt;/th&gt;
      &lt;th&gt;Precision&lt;/th&gt;
      &lt;th&gt;Recall&lt;/th&gt;
      &lt;th&gt;F1&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;BTE&lt;/td&gt;
      &lt;td&gt;0.75&lt;/td&gt;
      &lt;td&gt;0.76&lt;/td&gt;
      &lt;td&gt;0.84&lt;/td&gt;
      &lt;td&gt;0.80&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;CRF&lt;/td&gt;
      &lt;td&gt;0.82&lt;/td&gt;
      &lt;td&gt;0.88&lt;/td&gt;
      &lt;td&gt;0.81&lt;/td&gt;
      &lt;td&gt;0.84&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;…&lt;/td&gt;
      &lt;td&gt;…&lt;/td&gt;
      &lt;td&gt;…&lt;/td&gt;
      &lt;td&gt;…&lt;/td&gt;
      &lt;td&gt;…&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Web2Text&lt;/td&gt;
      &lt;td&gt;0.86&lt;/td&gt;
      &lt;td&gt;0.87&lt;/td&gt;
      &lt;td&gt;0.90&lt;/td&gt;
      &lt;td&gt;0.88&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Numbers taken from the &lt;a href=&quot;https://www.slideshare.net/eickhoff/web2text-deep-structured-boilerplate-removal&quot;&gt;Web2Text slides&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But what do these actually mean? Well let us take a deeper look at the different terms, starting of with introducing the “Confusion Matrix”.&lt;/p&gt;

&lt;h3 id=&quot;confusion-matrix&quot;&gt;Confusion Matrix&lt;/h3&gt;

&lt;p&gt;A key concept that we need to know before being able to explain the performance metrics is the &lt;strong&gt;confusion matrix&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Definition:&lt;/strong&gt; A confusion matrix is a table that is often used to describe the performance of a classification model (or “classifier”) on a set of test data for which the true values are known.&lt;/p&gt;

&lt;p&gt;A confusion matrix will look like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/confusion-matrix.png&quot; alt=&quot;/assets/images/posts/confusion-matrix.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The above might look “confusing” but is actually quite simple. The &lt;strong&gt;top line dictates the “Actual Value (=truth)”&lt;/strong&gt; while the &lt;strong&gt;left side shows the “prediction”&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We could look at this in the sense of that &lt;strong&gt;whenever we predict correctly we will see “True”&lt;/strong&gt;, while as &lt;strong&gt;we predict wrongly we will see “False”&lt;/strong&gt; correlated to the actual value Positive or Negative&lt;/p&gt;

&lt;p&gt;Mapping this to the terms filled in:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;True Positive: Prediction = True, Truth = True&lt;/li&gt;
  &lt;li&gt;False Positive: Prediction = True, Truth = False&lt;/li&gt;
  &lt;li&gt;False Negative: Prediction = False, Truth = True&lt;/li&gt;
  &lt;li&gt;True Negative: Prediction = False, Truth = False&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s look at an &lt;strong&gt;example&lt;/strong&gt; to make this more clearer.&lt;/p&gt;

&lt;p&gt;Example: “We want to show the confusion matrix for a classifier that classifies if an object recognition model detected an object as a car or not”. Then we could see the following confusion matrix for 1.000 test cases:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: right&quot;&gt; &lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Positive&lt;/strong&gt;&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Negative&lt;/strong&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;&lt;strong&gt;Positive&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;330 (TP)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2 (FN)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;&lt;strong&gt;Negative&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;7 (FP)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;661 (TN)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Showing that we correctly identified a car in 330 cases, wrongly detected a car 2 times, correctly predicted that it was not a car 661 times and wrongly predicted that it was not a car 7 times.&lt;/p&gt;

&lt;p&gt;Or in other words: We were wrong 9 times and correct 991 times (also known as accuracy, but more about this later).&lt;/p&gt;

&lt;h3 id=&quot;accuracy&quot;&gt;Accuracy&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;In short:&lt;/strong&gt; Accuracy is how well the model performs&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formula:&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;(TP + TN) / (TP + TN + FP + FN)&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;#CORRECT_PREDICTIONS / #TOTAL&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;precision&quot;&gt;Precision&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;In short:&lt;/strong&gt; How often are we correct in our positive prediction?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formula:&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;(TP) / (TP + FP)&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;#CORRECT_POSITIVE_PREDICTIONS / #POSITIVE_SAMPLES&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;With Precision we want to make sure that we can accurately say when it should be positive. E.g. in our example above we want to make sure that when we say that it’s car, that it really is a car and not some other object. This is important since we will often take actions based on our detections (e.g. in a self-driving car we could change the speed based on this).&lt;/p&gt;

&lt;h3 id=&quot;recall&quot;&gt;Recall&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;In short:&lt;/strong&gt; How often did we wrongly classify something as not true (= false)?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formula:&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;(TP) / (TP + FN)&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;#CORRECT_POSITIVE_PREDICTIONS / #TRUE_TRUTH_VALUES&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Recall highlights the cost of predicting something wrongly. E.g. in our example of the car, when we wrongly identify it as not a car, we might end up in hitting the car.&lt;/p&gt;

&lt;h3 id=&quot;f1-score&quot;&gt;F1 Score&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;In short:&lt;/strong&gt; Utilize the precision and recall to create a test’s accuracy through the &lt;a href=&quot;https://en.wikipedia.org/wiki/Harmonic_mean#Harmonic_mean_of_two_numbers&quot;&gt;“harmonic mean”&lt;/a&gt;. It focuses on the on the left-bottom to right-top diagonal in the Confusion Matrix.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formula:&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;2 * ((Precision * Recall) / (Precision + Recall))&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Looking at the definitions of Precision and Recall, we can see that they both focus on high impact cases (e.g. we don’t want to crash cars when we detected wrongly as not a car (= FN) and we don’t want to say that it’s a car if it’s not (= FP)). This is what the F1 score does, it will focus on what impacts our business the most compared to the Accuracy score.&lt;/p&gt;

&lt;p&gt;In other terms, we can thus say that the F1 score focuses on the left-bottom to right-top diagonal.&lt;/p&gt;

&lt;h3 id=&quot;roc-curve&quot;&gt;ROC Curve&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;In short:&lt;/strong&gt; This curve allows us to select the optimal model and discard sub-optimal ones.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formula:&lt;/strong&gt; False Positive Rate (FPR) = X-Axis and True Positive Rate (TPR) = Y-Axis&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;FPR:&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;TP / (TP + FN)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;TPR:&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;FP / (FP + TN)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The ROC Curve (= Receiver Operating Characteristic) shows the performance, while the “AUC (= Area Under the Curve)” performance metric allows us to describe this as a value to measure the performance of classification models.&lt;/p&gt;

&lt;p&gt;Every time when we classify a point, we take the &lt;strong&gt;probability&lt;/strong&gt; being returned to state if it’s matching or classifier or not (e.g. is it a car or not). But to be able to return true or false, we now have to introduce a &lt;em&gt;threshold&lt;/em&gt; that will &lt;strong&gt;convert this probability into a classification&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Based on the threshold selected, we will be able to construct a confusion matrix.&lt;/p&gt;

&lt;p&gt;We will now discretize the range of our threshold value (e.g. we make our range of [0, 1] to [0.0, 0.1, 0.2, …, 0.9, 1.0]) which we can now create the respective confusion matrices for. With those confusion matrices we will now calculate the True Positive Rate (= TPR) through the formula &lt;code class=&quot;highlighter-rouge&quot;&gt;TPR = TP / (FP + TN)&lt;/code&gt; and the False Positive Rate (= FPR) through &lt;code class=&quot;highlighter-rouge&quot;&gt;FPR = TP / (TP + FN)&lt;/code&gt; and plot these.&lt;/p&gt;

&lt;p&gt;This eventually will result in something as this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/roc-curve-own.png&quot; alt=&quot;/assets/images/posts/roc-curve-own.png&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; We strive to have a model that has a high AUC value, or a ROC curve that shows as much to the left top as possible.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;performance-in-regression-models&quot;&gt;Performance in Regression Models&lt;/h2&gt;

&lt;p&gt;To calculate the performance of regression models, we utilize mathematical formulas that will compare the plotted graph to the points that we are predicting.&lt;/p&gt;

&lt;p&gt;A good regression model should focus on minimizing the difference between the observation and the predicted value, while being unbiased. (Unbiased means that we try to find a balance between over-estimation and under-estimation)&lt;/p&gt;

&lt;h3 id=&quot;root-mean-square-error-rmse&quot;&gt;Root Mean Square Error (RMSE)&lt;/h3&gt;

&lt;p&gt;This is simply the root of the Mean Square Error:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;RMSE = \sqrt{\sum^n_{i=1}\frac{(\hat{y}_i - y_i)^2}{n}}&lt;/script&gt;

&lt;p&gt;Which translates to taking the distance between the actual point and the predicted point, squaring this and then dividing by the amount of points we have for the mean.&lt;/p&gt;

&lt;p&gt;Graphically this look like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/least_squares.png&quot; alt=&quot;/assets/images/posts/least_squares.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;f-test&quot;&gt;F-Test&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;In short:&lt;/strong&gt; The F-Test is used to compare statistical models that were fitted to a dataset, it allows us to identify the model that best fits the population.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formula:&lt;/strong&gt; $F = \frac{explained variance}{unexplained variance}$&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Explained Variance:&lt;/strong&gt; $\sum^K_{i=1}n_i\frac{(\bar{Y}_i - \bar{Y})^2}{K - 1}$&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Unexplained Variance:&lt;/strong&gt; $\sum^K_{i=1} \sum^{n_i}&lt;em&gt;{j=1} \frac{(Y&lt;/em&gt;{ij} - \bar{Y}_i)^2}{N - K}$
    &lt;ul&gt;
      &lt;li&gt;K = Number of groups&lt;/li&gt;
      &lt;li&gt;N = Overall Sample Size&lt;/li&gt;
      &lt;li&gt;$Y_{ij}$ = $j^{th}$ observation in the $i^{th}$ out of $K$ groups&lt;/li&gt;
      &lt;li&gt;$\bar{Y}$ = Overall mean of the data&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;r-squared&quot;&gt;R-Squared&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;In short:&lt;/strong&gt; R-Squared describes how well a model fits for a linear regression model. The higher R, the better the fit.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formula:&lt;/strong&gt; $R_2 = 1 - \frac{Explained Variation}{Total Variation} = 1 - \frac{SS_{res}}{SS_{tot}}$&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;$\hat{y} = \frac{1}{n} \sum^n_{i = 1} y_i$ (the mean of the observed data)&lt;/li&gt;
  &lt;li&gt;$SS_{tot}$: $\sum_i(y_i - \hat{y})^2$ (total sum of squares)&lt;/li&gt;
  &lt;li&gt;$SS_{res}$: $\sum_i(y_i - f_i)^2$ (sum of squares of residuals)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The below picture illustrates:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;$SS_{tot}$: red&lt;/li&gt;
  &lt;li&gt;$SS_{res}$: blue&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/coefficient-of-determination.png&quot; alt=&quot;/assets/images/posts/coefficient-of-determination.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;R-Squared (or also called the “Coefficient of Determination”) will show how close the data is to the fitted regression line. Or in other words, It indicates the percentage of the variance in the dependent variable that the independent variables explain collectively.&lt;/p&gt;

&lt;p&gt;This is an interesting metric, because &lt;strong&gt;it allows us to understand better if our model is being overfitted or not.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/r-squared.webp&quot; alt=&quot;/assets/images/posts/r-squared.webp&quot; /&gt;&lt;/p&gt;</content><author><name>Xavier Geerinck</name></author><category term="ai" /><category term="ai-ml" /><summary type="html">We currently see a lot of AI algorithms being created, but how can we actually measure the performance of these models? What are the terms we should look at to detect this?</summary></entry><entry><title type="html">Web2Text - Deep Structured Boilerplate Removal - Running the Code</title><link href="/web2text" rel="alternate" type="text/html" title="Web2Text - Deep Structured Boilerplate Removal - Running the Code" /><published>2020-01-02T09:00:00+00:00</published><updated>2020-01-02T09:00:00+00:00</updated><id>/web2text</id><content type="html" xml:base="/web2text">&lt;p&gt;In this article I will explain you how you can run the [Web2Text] (https://github.com/dalab/web2text) demonstration code available as explained in their &lt;a href=&quot;https://arxiv.org/pdf/1801.02607.pdf&quot;&gt;paper&lt;/a&gt; or &lt;a href=&quot;https://www.slideshare.net/eickhoff/web2text-deep-structured-boilerplate-removal&quot;&gt;presentation&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h2&gt;

&lt;p&gt;Before we can run the entire pipeline, we first have to install some tools for this to work.&lt;/p&gt;

&lt;h3 id=&quot;checking-the-java-version&quot;&gt;Checking the JAVA version&lt;/h3&gt;

&lt;p&gt;Make sure that you have java &amp;gt; 1.8 installed by checking this with &lt;code class=&quot;highlighter-rouge&quot;&gt;java -version&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;installing-scala-sbt&quot;&gt;Installing Scala SBT&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Download scala-sbt (https://www.scala-sbt.org/download.html)
    &lt;ul&gt;
      &lt;li&gt;Note: I had to use 1.3.3 on Windows, 1.3.5 ad 1.3.4 seems broken
        &lt;ul&gt;
          &lt;li&gt;In this I had to change &lt;code class=&quot;highlighter-rouge&quot;&gt;C:\Program Files (x86)\sbt\bin\sbt.bat&lt;/code&gt; line 385 and replace &lt;code class=&quot;highlighter-rouge&quot;&gt;if x%g:^==% == x%g% (&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;if &quot;x%g:^==%&quot; == &quot;x%g%&quot; (&lt;/code&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;installing-tensorflow&quot;&gt;Installing Tensorflow&lt;/h3&gt;

&lt;p&gt;The Web2Text project utilizes Tensorflow to create a convolutional neural network. To utilize the trained model, it will utilize Tensorflow, so we should install it as well. To do this, we can run the following commands:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;numpy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;1.18.0 &lt;span class=&quot;nv&quot;&gt;tensorflow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;1.15.0 tensorflow-gpu&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;1.15.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; See that we are installing Tensorflow 1.15.0 and not 2.0.0, this is because the original Web2Text code is not up to date with the latest version yet. The error code being returned is that it’s missing the &lt;code class=&quot;highlighter-rouge&quot;&gt;variable_scope&lt;/code&gt;. This can potentially be resolved by utilizing &lt;a href=&quot;(https://www.tensorflow.org/api_docs/python/tf/compat/v1/variable_scope)&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ts.compat.v1&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;installing-nvidia-cuda-toolkit&quot;&gt;Installing NVIDIA CUDA Toolkit&lt;/h3&gt;

&lt;p&gt;For Tensorflow to perform well, we have to install the NVIDIA CUDA Toolkit, this way we will be able to utilize GPU training / inferencing:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Install https://developer.nvidia.com/cuda-toolkit-archive v10.0
    &lt;ul&gt;
      &lt;li&gt;Note: &amp;gt;v10.0 doesn’t work! see https://www.tensorflow.org/install/gpu#software_requirements&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Install https://developer.nvidia.com/rdp/cudnn-download for v10.0
    &lt;ul&gt;
      &lt;li&gt;Note: open the .zip file and extract the content in the &lt;code class=&quot;highlighter-rouge&quot;&gt;cuda/&lt;/code&gt; folder to the &lt;code class=&quot;highlighter-rouge&quot;&gt;C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v10.0&lt;/code&gt; folder
```&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As a last step, we can now adapt our PATH variable to include the NVIDIA toolkit:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SET &lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;C:&lt;span class=&quot;se&quot;&gt;\P&lt;/span&gt;rogram Files&lt;span class=&quot;se&quot;&gt;\N&lt;/span&gt;VIDIA GPU Computing Toolkit&lt;span class=&quot;se&quot;&gt;\C&lt;/span&gt;UDA&lt;span class=&quot;se&quot;&gt;\v&lt;/span&gt;10.0&lt;span class=&quot;se&quot;&gt;\b&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;%PATH%
SET &lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;C:&lt;span class=&quot;se&quot;&gt;\P&lt;/span&gt;rogram Files&lt;span class=&quot;se&quot;&gt;\N&lt;/span&gt;VIDIA GPU Computing Toolkit&lt;span class=&quot;se&quot;&gt;\C&lt;/span&gt;UDA&lt;span class=&quot;se&quot;&gt;\v&lt;/span&gt;10.0&lt;span class=&quot;se&quot;&gt;\e&lt;/span&gt;xtras&lt;span class=&quot;se&quot;&gt;\C&lt;/span&gt;UPTI&lt;span class=&quot;se&quot;&gt;\l&lt;/span&gt;ibx64&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;%PATH%
SET &lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;C:&lt;span class=&quot;se&quot;&gt;\P&lt;/span&gt;rogram Files&lt;span class=&quot;se&quot;&gt;\N&lt;/span&gt;VIDIA GPU Computing Toolkit&lt;span class=&quot;se&quot;&gt;\C&lt;/span&gt;UDA&lt;span class=&quot;se&quot;&gt;\v&lt;/span&gt;10.0&lt;span class=&quot;se&quot;&gt;\i&lt;/span&gt;nclude&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;%PATH%
SET &lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;C:&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;ools&lt;span class=&quot;se&quot;&gt;\c&lt;/span&gt;uda&lt;span class=&quot;se&quot;&gt;\b&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;%PATH%
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;downloading-our-web2text-code&quot;&gt;Downloading our Web2Text code&lt;/h3&gt;

&lt;p&gt;Download the source code with: &lt;code class=&quot;highlighter-rouge&quot;&gt;git clone https://github.com/dalab/web2text.git&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;running-the-code&quot;&gt;Running the code&lt;/h2&gt;

&lt;p&gt;After installing everything, we are now ready to run the code on our own HTML file:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Navigate to root path of Web2Text&lt;/li&gt;
  &lt;li&gt;Open CMD&lt;/li&gt;
  &lt;li&gt;[CMD] &lt;code class=&quot;highlighter-rouge&quot;&gt;sbt &quot;runMain ch.ethz.dalab.web2text.ExtractPageFeatures result/input.html result/step_1_extracted_features&quot;&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;Note: this will download some files&lt;/li&gt;
      &lt;li&gt;Note: on windows there is a bug, see: https://github.com/sbt/sbt/issues/5222&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Files will now be visible in the root folder&lt;/li&gt;
  &lt;li&gt;[CMD] &lt;code class=&quot;highlighter-rouge&quot;&gt;python src\main\python\main.py classify result\step_1_extracted_features result/step_2_classified_labels&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;Note: first error I got was: &lt;code class=&quot;highlighter-rouge&quot;&gt;absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --logtostderr before flags were parsed.&lt;/code&gt;, this was resolved by opening &lt;code class=&quot;highlighter-rouge&quot;&gt;src/main/python/config.py&lt;/code&gt; and adding &lt;code class=&quot;highlighter-rouge&quot;&gt;import sys\nFLAGS(sys.argv)&lt;/code&gt; under &lt;code class=&quot;highlighter-rouge&quot;&gt;FLAGS = tf.app.flags.FLAGS&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Note: second error I got was: &lt;code class=&quot;highlighter-rouge&quot;&gt;tensorflow.python.framework.errors_impl.NotFoundError: FindFirstFile failed for: trained_model_cleaneval_split : The system cannot find the path specified.&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
    &lt;ul&gt;
      &lt;li&gt;This was due to &lt;code class=&quot;highlighter-rouge&quot;&gt;os.path.join(CHECKPOINT_DIR, &quot;unary.ckpt&quot;)&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;os.path.join(CHECKPOINT_DIR, &quot;edge.ckpt&quot;)&lt;/code&gt; which do not take into account the running from the root directory. We can easily resolve this by adding &lt;code class=&quot;highlighter-rouge&quot;&gt;os.path.dirname(__file__)&lt;/code&gt; to the join parameters. Example: &lt;code class=&quot;highlighter-rouge&quot;&gt;os.path.join(os.path.dirname(__file__), CHECKPOINT_DIR, &quot;unary.ckpt&quot;)&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;[CMD] &lt;code class=&quot;highlighter-rouge&quot;&gt;sbt &quot;runMain ch.ethz.dalab.web2text.ApplyLabelsToPage result/input.html result/step_2_classified_labels result/step_3_applied_labels&quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;running-the-code---summarized&quot;&gt;Running the code - Summarized&lt;/h2&gt;

&lt;p&gt;For people just wanting to run the code you can find a copy/paste example here :)&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sbt &lt;span class=&quot;s2&quot;&gt;&quot;runMain ch.ethz.dalab.web2text.ExtractPageFeatures result/input.html result/step_1_extracted_features&quot;&lt;/span&gt;
python src&lt;span class=&quot;se&quot;&gt;\m&lt;/span&gt;ain&lt;span class=&quot;se&quot;&gt;\p&lt;/span&gt;ython&lt;span class=&quot;se&quot;&gt;\m&lt;/span&gt;ain.py classify result&lt;span class=&quot;se&quot;&gt;\s&lt;/span&gt;tep_1_extracted_features result/step_2_classified_labels
sbt &lt;span class=&quot;s2&quot;&gt;&quot;runMain ch.ethz.dalab.web2text.ApplyLabelsToPage result/input.html result/step_2_classified_labels result/step_3_applied_labels&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Xavier Geerinck</name></author><category term="ai" /><category term="ai-ml" /><summary type="html">In this article I will explain you how you can run the [Web2Text] (https://github.com/dalab/web2text) demonstration code available as explained in their paper or presentation.</summary></entry><entry><title type="html">Create a script to deploy a container automatically with Azure Container Registry</title><link href="/azure-automated-container-push" rel="alternate" type="text/html" title="Create a script to deploy a container automatically with Azure Container Registry" /><published>2019-12-24T09:00:05+00:00</published><updated>2019-12-24T09:00:05+00:00</updated><id>/azure-automated-container-push</id><content type="html" xml:base="/azure-automated-container-push">&lt;p&gt;Currently I am working on a new web application that will require a server for signaling purposes. Now to run this server, I would like to utilize Azure Web Apps together with a container. Since I would like a low barrier to entry, I want to be able to run a command that takes care of:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Login to azure automatically&lt;/li&gt;
  &lt;li&gt;Setting up an Azure Container Registry service if it doesn’t exist yet&lt;/li&gt;
  &lt;li&gt;Logs in to docker through the credentials it will automatically fetch&lt;/li&gt;
  &lt;li&gt;Builds the docker container&lt;/li&gt;
  &lt;li&gt;Pushes the docker container to the Azure Container Registry service&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Therefor I created an &lt;code class=&quot;highlighter-rouge&quot;&gt;azure-login.sh&lt;/code&gt; script that takes care of logging in the user automatically and allows the user to set the subscription, and a &lt;code class=&quot;highlighter-rouge&quot;&gt;acr-build-and-push-container.sh&lt;/code&gt; script that takes care of the steps listed above.&lt;/p&gt;

&lt;p&gt;I can now run the command:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./acr-build-and-push-container.sh mycontainerregistry&lt;span class=&quot;nv&quot;&gt;$RANDOM&lt;/span&gt; ../ webapplication:v0.0.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Which will:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Build a container based on a &lt;code class=&quot;highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt; located at &lt;code class=&quot;highlighter-rouge&quot;&gt;../&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Push the image &lt;code class=&quot;highlighter-rouge&quot;&gt;webapplication:v0.0.1&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;mycontainerregistry$RANDOM&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;$RANDOM&lt;/code&gt; will give us a random integer so that we don’t create an already existing azure resource&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;source-code&quot;&gt;Source Code&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;azure-login.sh&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;az&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; /dev/null&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;[AZ-Login] AZ CLI not installed, installing...&quot;&lt;/span&gt;
    curl &lt;span class=&quot;nt&quot;&gt;-sL&lt;/span&gt; https://aka.ms/InstallAzureCLIDeb | &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;bash
&lt;span class=&quot;k&quot;&gt;fi

&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;[AZ-Login] AZ CLI Installed, continuing&quot;&lt;/span&gt;
az login &lt;span class=&quot;nt&quot;&gt;--output&lt;/span&gt; table &lt;span class=&quot;nt&quot;&gt;--query&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'[].{name: name, subscriptionId: id, isDefault: isDefault}'&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# az account list --output table&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;[AZ-Login] Select Subscription&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Subscription: &quot;&lt;/span&gt; var_azure_subscription
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;[AZ-Login] Setting Subscription to &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var_azure_subscription&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
az account &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--subscription&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$var_azure_subscription&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;[AZ-Login] Logged in!&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;acr-build-and-push-container.sh&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# =====================================================&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Parameters&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# =====================================================&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Base Parameters&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;REQUIRE_LOGIN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:-&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;AZURE_LOCATION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;westeurope
&lt;span class=&quot;nv&quot;&gt;RESOURCE_GROUP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;webrtc-file-dropper

&lt;span class=&quot;c&quot;&gt;# Specific Parameters&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;CONTAINER_REGISTRY_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;DOCKER_FILE_LOCATION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$2&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;DOCKER_IMAGE_NAME_AND_VERSION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$3&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Print Parameters&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;=================================================&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;================== PARAMETERS ===================&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;=================================================&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;AZURE_LOCATION: &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$AZURE_LOCATION&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;RESOURCE_GROUP: &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$RESOURCE_GROUP&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;REQUIRE_LOGIN: &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$REQUIRE_LOGIN&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;CONTAINER_REGISTRY_NAME: &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CONTAINER_REGISTRY_NAME&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;DOCKER_FILE_LOCATION: &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$DOCKER_FILE_LOCATION&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;DOCKER_IMAGE_NAME_AND_VERSION: &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$DOCKER_IMAGE_NAME_AND_VERSION&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# =====================================================&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Functions&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# =====================================================&lt;/span&gt;
exit_onerror&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-eq&lt;/span&gt; 0 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
        &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;exit
    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# ================= PARAMETER CHECK ====================&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-z&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$CONTAINER_REGISTRY_NAME&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Usage: &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &amp;lt;container_registry_name&amp;gt; &amp;lt;dockerfile_location&amp;gt; &amp;lt;docker_image_name_and_version&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Example: &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; mycontainerregistry&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\$&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;RANDOM ./ my-image:v1&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;exit
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# ====================== LOGIN ==========================&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$REQUIRE_LOGIN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$REQUIRE_LOGIN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
    ./azure-login.sh
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# =======================================================&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# PRE-REQUISITES&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# =======================================================&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;=================================================&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;=============== PRE-REQUISITES ==================&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;=================================================&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Install docker if not installed&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;docker&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; /dev/null&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;[Docker] Docker not installed, installing...&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get update
    &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;docker.io
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Make sure we can reach docker&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;docker ps 2&amp;gt;&amp;amp;1&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;[Docker] Can not reach the Docker Daemon, check if 'unix:///var/run/docker.sock' exists&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;[Docker] Note - WSL 1: Expose daemon on tcp://localhost:2375 and run 'echo &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;export DOCKER_HOST=tcp://localhost:2375&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &amp;gt;&amp;gt; ~/.bashrc &amp;amp;&amp;amp; source ~/.bashrc'&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;exit
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fi

&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;[Docker] Installed, continuing&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Create Resource Group&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;[AZ-Group] Creating resource group &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$RESOURCE_GROUP&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
az group create &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$AZURE_LOCATION&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$RESOURCE_GROUP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; /dev/null
exit_onerror

&lt;span class=&quot;c&quot;&gt;# Make sure container registry exists, else create it&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;az acr show &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$CONTAINER_REGISTRY_NAME&lt;/span&gt; 2&amp;gt;&amp;amp;1&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ERROR: The resource with name '&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CONTAINER_REGISTRY_NAME&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;' and type 'Microsoft.ContainerRegistry/registries' could not be found in subscription&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;[AZ-ACR] Container Registry with name &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CONTAINER_REGISTRY_NAME&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; does not exist, attempting to create one with 'Basic' sku&quot;&lt;/span&gt;

     &lt;span class=&quot;c&quot;&gt;# skus: https://docs.microsoft.com/en-us/azure/container-registry/container-registry-skus&lt;/span&gt;
    az acr create &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--resource-group&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$RESOURCE_GROUP&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$CONTAINER_REGISTRY_NAME&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--sku&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Basic&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; /dev/null

    exit_onerror
&lt;span class=&quot;k&quot;&gt;fi

&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;[AZ-ACR] Container Registry &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CONTAINER_REGISTRY_NAME&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; exists&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# =======================================================&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# BUILD CONTAINER&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# =======================================================&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;=================================================&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;============= BUILDING CONTAINER ================&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;=================================================&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;[Docker] Building container&quot;&lt;/span&gt;
docker build &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$DOCKER_FILE_LOCATIONDockerfile&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CONTAINER_REGISTRY_NAME&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.azurecr.io/&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$DOCKER_IMAGE_NAME_AND_VERSION&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$DOCKER_FILE_LOCATION&lt;/span&gt;
exit_onerror

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;=================================================&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;============== PUSHING CONTAINER ================&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;=================================================&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;[AZ-ACR] Enabling admin&quot;&lt;/span&gt;
az acr update &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$CONTAINER_REGISTRY_NAME&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--admin-enabled&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true &lt;/span&gt;1&amp;gt; /dev/null
exit_onerror

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;[AZ-ACR] Fetching credentials&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ACR_PASSWORD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;az acr credential show &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$CONTAINER_REGISTRY_NAME&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--query&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;passwords[0].value&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
exit_onerror

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;[Docker] Logging in&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Note: use sh -c since bash interprets it wrong and will fail to login&lt;/span&gt;
sh &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;docker login -u &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CONTAINER_REGISTRY_NAME&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -p &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ACR_PASSWORD&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CONTAINER_REGISTRY_NAME&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.azurecr.io&quot;&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;[AZ-ACR] Pushing container&quot;&lt;/span&gt;
docker push &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CONTAINER_REGISTRY_NAME&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.azurecr.io/&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$DOCKER_IMAGE_NAME_AND_VERSION&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Xavier Geerinck</name></author><category term="azure" /><category term="coding" /><category term="coding-bash" /><summary type="html">Currently I am working on a new web application that will require a server for signaling purposes. Now to run this server, I would like to utilize Azure Web Apps together with a container. Since I would like a low barrier to entry, I want to be able to run a command that takes care of:</summary></entry><entry><title type="html">Creating a Pub/Sub system with 100.000 subscribers and 1 publisher</title><link href="/1-pub-to-100k-sub" rel="alternate" type="text/html" title="Creating a Pub/Sub system with 100.000 subscribers and 1 publisher" /><published>2019-11-06T09:00:00+00:00</published><updated>2019-11-06T09:00:00+00:00</updated><id>/1-pub-to-100k-sub</id><content type="html" xml:base="/1-pub-to-100k-sub">&lt;p&gt;I decided to do something exciting and challenging for personal growth in my Data &amp;amp; AI area and posed myself the hypothesis: “Can I create a system that with a few publishers but a massive amount of subscribers?” with the constraints of:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Should be easy to maintain (as much PaaS as possible)&lt;/li&gt;
  &lt;li&gt;Should be easy to scale (can I autoscale? Container support? …)&lt;/li&gt;
  &lt;li&gt;Should be able to handle real-time data flows (a real pub/sub system!)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thinking back this was something I actually encountered &lt;a href=&quot;https://github.com/sockjs/sockjs-node/issues/156&quot;&gt;before in 2014&lt;/a&gt; while working on the &lt;a href=&quot;https://xaviergeerinck.com/projects/feedient&quot;&gt;Feedient&lt;/a&gt; &lt;a href=&quot;https://github.com/Feedient/Server/blob/060184240f6028b4f29a76d884df9345561878dc/src/lib/socket.js&quot;&gt;socket implementation&lt;/a&gt;, here however I was utilizing SockJS and only had a need for around 20k connected clients.&lt;/p&gt;

&lt;p&gt;After doing some research on different Azure components (since it’s my comfort zone), I came to the following conclusion:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Apache Kafka:&lt;/strong&gt; We can go high here, but it seems to be a &lt;a href=&quot;https://stackoverflow.com/questions/46284641/maximum-subscription-limit-of-kafka-topics-per-consumer&quot;&gt;bad design&lt;/a&gt;. Next to that, it instantly starts off at 1.8k for a base HA cluster…&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Redis:&lt;/strong&gt; Might be possible! I could however not find anything about this (if anyone knows, please comment below :))&lt;/li&gt;
  &lt;li&gt;Azure Event Hubs: Not possible, it will scale well but would be too expensive + there is a limit of around &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/event-hubs/event-hubs-quotas&quot;&gt;3200 connections &lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;Note: this could be increased through dedicated event hubs or contacting support but this would grow too expensive&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Azure Event Grid:&lt;/strong&gt; &lt;a href=&quot;https://github.com/MicrosoftDocs/azure-docs/blob/master/includes/event-grid-limits.md&quot;&gt;500 / topic&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;Note: this could potentially be increased by multiple chained Event Grids, but this would cause too much implementation work on the moment&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Azure Service Bus:&lt;/strong&gt; &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/service-bus-messaging/service-bus-quotas&quot;&gt;2.000 subscriptions&lt;/a&gt; on the basic or standard tier
    &lt;ul&gt;
      &lt;li&gt;Note: Again, can be increased but not ideal for the use case of growing towards &amp;gt; 10k connections.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After checking all of the above, I came to the conclusion that nothing in my existing skill portfolio is going to cover this… so I started my search online. After a bit of searching I came on a product calledd &lt;a href=&quot;https://www.emqx.io/&quot;&gt;emqx.io&lt;/a&gt; which sounded reasonable! And actually it was!&lt;/p&gt;

&lt;p&gt;5 minutes later, I found and deployed the &lt;a href=&quot;https://hub.docker.com/u/emqx/&quot;&gt;docker container&lt;/a&gt; through the following command:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note: This is being deployed on a 1 GB RAM, 1 vCPU container instance on Azure&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Create container&lt;/span&gt;
az container create &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt; General &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; emqx &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--dns-name-label&lt;/span&gt; xemqx &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--image&lt;/span&gt; emqx/emqx:latest &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--cpu&lt;/span&gt; 1 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--memory&lt;/span&gt; 1 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--ports&lt;/span&gt; 1883 8883 8083 8084 8080 18083
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With the port mapping being:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Port&lt;/th&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;isPrivate?&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1883&lt;/td&gt;
      &lt;td&gt;MQTT&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;8883&lt;/td&gt;
      &lt;td&gt;MQTT/SSL&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;8083&lt;/td&gt;
      &lt;td&gt;MQTT/Websocket&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;8084&lt;/td&gt;
      &lt;td&gt;MQTT/Websocket/SSL&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;8080&lt;/td&gt;
      &lt;td&gt;Management API&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;18083&lt;/td&gt;
      &lt;td&gt;Dashboard&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4369&lt;/td&gt;
      &lt;td&gt;Node Discovery&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;5369&lt;/td&gt;
      &lt;td&gt;Cluster RPC&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;6369&lt;/td&gt;
      &lt;td&gt;Cluster Channel&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;After which I could open the dashboard by loading the FQDN:18083:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/pub-sub/dashboard.png&quot; alt=&quot;/assets/images/posts/pub-sub/dashboard.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;stress-testing---10k-connections&quot;&gt;Stress Testing - 10k Connections&lt;/h2&gt;

&lt;p&gt;Ok, so we now got our broker done. How can we actually start stress testing? Well for this I wrote a small script that we can just execute locally:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;client.js&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mqtt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;mqtt&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;noOfClients&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CLIENT_CONNECTIONS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;250&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// How many clients to create?&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;serverUrl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CLIENT_URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`Connecting &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;noOfClients&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; to &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;serverUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;clientNo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;clientNo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;noOfClients&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;clientNo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Unique MQTT Object per client&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mqtt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;serverUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;test-message&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

            &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`Client Connected #&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;clientNo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// client.publish('presence', 'Hello mqtt')&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;topic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// message is Buffer&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`Client #&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;clientNo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; Received: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// In this test we instantly end them&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`Connected &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;noOfClients&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; clients`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;package.json&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;mqtt-tester&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1.0.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Testing mqtt subscriptions&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;main&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;client.js&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;echo &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Error: no test specified&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &amp;amp;&amp;amp; exit 1&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;author&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;license&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ISC&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;dependencies&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;async-mqtt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;^2.4.2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;mqtt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;^3.0.0&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After executing this locally with &lt;code class=&quot;highlighter-rouge&quot;&gt;CLIENT_CONNECTIONS=10000 CLIENT_URL=mqtt://xemqx.northeurope.azurecontainer.io node client.js&lt;/code&gt; I got to 10k connections! With a stable running &lt;code class=&quot;highlighter-rouge&quot;&gt;EMQX&lt;/code&gt; service.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/pub-sub/10k.png&quot; alt=&quot;/assets/images/posts/pub-sub/10k.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next to that, I could also send to my subscribers by utilizing this small script (nothing fancy, I know):&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;sender.js&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mqtt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;mqtt&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mqtt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;mqtt://xemqx.northeurope.azurecontainer.io&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;setInterval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;publish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;test-message&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`Hello World: #&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`Sent Message &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;However when wanting to go higher, I started noticing delays on my computer not being able to handle the amount of subscriptions open… so back to the drawing board!&lt;/p&gt;

&lt;h2 id=&quot;stress-testing---28k-connections&quot;&gt;Stress Testing - 28k Connections&lt;/h2&gt;

&lt;p&gt;How can we improve this? Well one simple way is to create a docker container that we can put on a cloud host and simply spin up more instances! So let’s do just that and create a Dockerfile + build the image.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dockerfile&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Note: build with `docker build -t thebillkidy/mqtt-tester:1.0 .`&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Note: push to docker hub with: `docker push thebillkidy/mqtt-test:1.0`&lt;/span&gt;
FROM node:latest
WORKDIR /usr/src/app

&lt;span class=&quot;c&quot;&gt;# Install package.json dependencies&lt;/span&gt;
COPY package&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.json ./
RUN npm &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Install app&lt;/span&gt;
COPY &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Default ENV variables&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Note: specify those while running `docker run -e CLIENT_URL=mqtt://localhost`&lt;/span&gt;
ENV &lt;span class=&quot;nv&quot;&gt;CLIENT_CONNECTIONS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1000
ENV &lt;span class=&quot;nv&quot;&gt;CLIENT_URL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'mqtt://localhost'&lt;/span&gt;

CMD &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;node&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;client_massive.js&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finishing with building the container and pushing it so that we can use it.&lt;/p&gt;

&lt;p&gt;But how can we now deploy this on cloud? Well in Azure we can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;az cli&lt;/code&gt; to create out containers after being pushed. &lt;strong&gt;So creating a small line we can multiply this * 50!&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;i &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;1..50&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do &lt;/span&gt;az container create &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt; POC-EMQX &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; subscriber-&lt;span class=&quot;nv&quot;&gt;$RANDOM&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--image&lt;/span&gt; thebillkidy/mqtt-tester:1.0 &lt;span class=&quot;nt&quot;&gt;--cpu&lt;/span&gt; 1 &lt;span class=&quot;nt&quot;&gt;--memory&lt;/span&gt; 1 &lt;span class=&quot;nt&quot;&gt;--environment-variables&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;CLIENT_CONNECTIONS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;10000 &lt;span class=&quot;nv&quot;&gt;CLIENT_URL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;mqtt://xemqx.northeurope.azurecontainer.io &lt;span class=&quot;nt&quot;&gt;--no-wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Deployed Container &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Allowing a couple of minutes to make sure the containers are being spun up, we can now check the dashboard again. &lt;strong&gt;However!&lt;/strong&gt; it seems that it’s crashing at around 28k connections…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/pub-sub/28k.png&quot; alt=&quot;/assets/images/posts/pub-sub/28k.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Looking at our statistics of the machine, we see that the memory cap is close to being hit - so let’s see if we can work on this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/pub-sub/28k-stats.png&quot; alt=&quot;/assets/images/posts/pub-sub/28k-stats.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;stress-testing---100k-connections&quot;&gt;Stress Testing - 100k Connections&lt;/h2&gt;

&lt;p&gt;Rather than deploying our &lt;code class=&quot;highlighter-rouge&quot;&gt;emqx&lt;/code&gt; container with 1GB of RAM and 1 CPU, let’s take 4 of both and retry.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Create container
az container create \
    -g General \
    --name emqx \
    --dns-name-label xemqx \
    --image emqx/emqx:latest \
    --cpu 4 \
    --memory 4 \
    --ports 1883 8883 8083 8084 8080 18083
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With a script to create 50 x 2k connections&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;i &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;1..50&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do &lt;/span&gt;az container create &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt; POC-EMQX &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; subscriber-&lt;span class=&quot;nv&quot;&gt;$RANDOM&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--image&lt;/span&gt; thebillkidy/mqtt-tester:1.0 &lt;span class=&quot;nt&quot;&gt;--cpu&lt;/span&gt; 1 &lt;span class=&quot;nt&quot;&gt;--memory&lt;/span&gt; 1 &lt;span class=&quot;nt&quot;&gt;--environment-variables&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;CLIENT_CONNECTIONS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;2000 &lt;span class=&quot;nv&quot;&gt;CLIENT_URL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;mqtt://xemqx.northeurope.azurecontainer.io &lt;span class=&quot;nt&quot;&gt;--no-wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Deployed Container &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Which after a while of waiting to allow the subscriptions to come up shows us!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/pub-sub/100k.png&quot; alt=&quot;/assets/images/posts/pub-sub/100k.png&quot; /&gt;
&lt;img src=&quot;/assets/images/posts/pub-sub/100k-stats.png&quot; alt=&quot;/assets/images/posts/pub-sub/100k-stats.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So we did it, we scaled it to 100k subscribers!&lt;/p&gt;

&lt;h2 id=&quot;further&quot;&gt;Further&lt;/h2&gt;

&lt;p&gt;So the above is by no means a production system, it’s merely a POC showing that we can scale to a certain amount of users. For further research I would like to scale this up towards 1M and even 10M subscribers. To do this, I would need to adapt the tooling written to make sure it scales better (there is a container limit and I can only open 2k subscribers per container in a stable way on this size). Next to that, does it not show how to run this in production and maintain it for a longer amount of time.&lt;/p&gt;</content><author><name>Xavier Geerinck</name></author><category term="azure" /><category term="coding-javascript" /><category term="iot" /><summary type="html">I decided to do something exciting and challenging for personal growth in my Data &amp;amp; AI area and posed myself the hypothesis: “Can I create a system that with a few publishers but a massive amount of subscribers?” with the constraints of: Should be easy to maintain (as much PaaS as possible) Should be easy to scale (can I autoscale? Container support? …) Should be able to handle real-time data flows (a real pub/sub system!)</summary></entry><entry><title type="html">Facebook ReAgent - An End-to-End Use Case</title><link href="/facebook-reagent" rel="alternate" type="text/html" title="Facebook ReAgent - An End-to-End Use Case" /><published>2019-10-30T09:00:00+00:00</published><updated>2019-10-30T09:00:00+00:00</updated><id>/facebook-reagent</id><content type="html" xml:base="/facebook-reagent">&lt;p&gt;Facebook &lt;a href=&quot;https://ai.facebook.com/blog/open-sourcing-reagent-a-platform-for-reasoning-systems/&quot;&gt;decided&lt;/a&gt; to release their end-to-end applied reinforcement learning platform called &lt;a href=&quot;https://github.com/facebookresearch/ReAgent&quot;&gt;ReAgent&lt;/a&gt;, after reading their vision on this, I have to say that I am completely hooked! They are providing an excellent view of Reinforcement Learning and the future adoption of it. But why is this and how can we get started with it?&lt;/p&gt;

&lt;p&gt;From working with enterprise customers for the past 2 years, my experience is the following in the Reinforcement Learning domain:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The customer maturity level is low - they do not know what Reinforcement Learning is, nor do they know how to get started with it
    &lt;ul&gt;
      &lt;li&gt;To quote one of my customers: “Ah it’s that tool used for playing games”&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;It’s hard to implement in current existing systems, they are mostly based on hard coded rules (or even heuristics if they’re modern) making it a technical debt investment&lt;/li&gt;
  &lt;li&gt;Modeling the existing problem into a &lt;a href=&quot;/markov-property-chain-reward-decision&quot;&gt;Markov Decision Process (MDP)&lt;/a&gt; is not always trivial&lt;/li&gt;
  &lt;li&gt;Existing systems use a variety of languages: Python, C++, PHP, C#, … how do you integrate into these applications?&lt;/li&gt;
  &lt;li&gt;Personal: I think the performance impact caused by Python should not be overlooked - I for example saw a 44x increase on a personal benchmark I did when comparing C# to Python for an Expected SARSA algorithm.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Which is why I think the ReAgent platform proposal shines! It does solve all the problems mentioned above since it now allows the customer to gradually adapt due to the workflow provided, going from hard-coded rules to eventually Torchscript running the Bandit or RL Models. Illustrated as follows:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/fb-reagent/workflow.jpg&quot; alt=&quot;/assets/images/posts/fb-reagent/workflow.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To get started with this I installed and ran the getting started guide myself.&lt;/p&gt;

&lt;h2 id=&quot;installing-reagent&quot;&gt;Installing ReAgent&lt;/h2&gt;

&lt;p&gt;Luckily Getting Started with ReAgent has been made easy due to the &lt;a href=&quot;http://reagent.ai/rasp_tutorial.html&quot;&gt;excellent tutorial&lt;/a&gt; that is being provided by Facebook. Installing the platform can be done by executing the following:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Install extra dependencies&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get update
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;build-essential ca-certificates cmake git &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;software-properties-common vim emacs wget
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;unzip
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;libboost-dev &lt;span class=&quot;c&quot;&gt;# Boost C++ Lib - https://www.boost.org/&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;libgflags-dev &lt;span class=&quot;c&quot;&gt;# Commandline flags processing - https://github.com/gflags/gflags&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;libgoogle-glog-dev &lt;span class=&quot;c&quot;&gt;# Application level logging - https://github.com/google/glog&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;update-ca-certificates

&lt;span class=&quot;c&quot;&gt;# Install Miniconda&lt;/span&gt;
wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh &lt;span class=&quot;nt&quot;&gt;-O&lt;/span&gt; miniconda.sh
&lt;span class=&quot;nb&quot;&gt;chmod&lt;/span&gt; +x miniconda.sh
./miniconda.sh &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# silent install&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;HOME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/miniconda3/bin:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# Enable conda for now, conda init will completely init it in bashrc&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#echo 'export PATH=&quot;${HOME}/miniconda3/bin:${PATH}&quot;' &amp;gt;&amp;gt; ~/.bashrc&lt;/span&gt;
conda config &lt;span class=&quot;nt&quot;&gt;--set&lt;/span&gt; auto_activate_base &lt;span class=&quot;nb&quot;&gt;true
&lt;/span&gt;conda init
&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; ~/.bashrc

&lt;span class=&quot;c&quot;&gt;# Install Spark&lt;/span&gt;
wget https://archive.apache.org/dist/spark/spark-2.3.3/spark-2.3.3-bin-hadoop2.7.tgz
&lt;span class=&quot;nb&quot;&gt;tar&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-xzf&lt;/span&gt; spark-2.3.3-bin-hadoop2.7.tgz
&lt;span class=&quot;nb&quot;&gt;sudo mv &lt;/span&gt;spark-2.3.3-bin-hadoop2.7 /usr/local/spark
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;:/usr/local/spark/bin
pip &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;gym[classic_control,box2d,atari]&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Install LibTorch&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# see: https://pytorch.org/get-started/locally/&lt;/span&gt;
wget https://download.pytorch.org/libtorch/cpu/libtorch-cxx11-abi-shared-with-deps-1.3.0%2Bcpu.zip &lt;span class=&quot;nt&quot;&gt;-O&lt;/span&gt; libtorch.zip
unzip libtorch.zip &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/

&lt;span class=&quot;c&quot;&gt;# Set JAVA_HOME&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;JAVA_HOME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;dirname&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;dirname&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt; which conda&lt;span class=&quot;si&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CONDA_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;HOME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/miniconda&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;LD_LIBRARY_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CONDA_PATH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/lib:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;LD_LIBRARY_PATH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Install ReAgent&lt;/span&gt;
conda config &lt;span class=&quot;nt&quot;&gt;--add&lt;/span&gt; channels conda-forge
conda config &lt;span class=&quot;nt&quot;&gt;--add&lt;/span&gt; channels pytorch
&lt;span class=&quot;c&quot;&gt;#conda install glog&lt;/span&gt;

git clone &lt;span class=&quot;nt&quot;&gt;--recurse-submodules&lt;/span&gt; https://github.com/facebookresearch/ReAgent.git

&lt;span class=&quot;c&quot;&gt;# Install ReAgent&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;ReAgent

conda &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--file&lt;/span&gt; requirements.txt

&lt;span class=&quot;nb&quot;&gt;mkdir &lt;/span&gt;serving/build
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;serving/build
cmake &lt;span class=&quot;nt&quot;&gt;-DCMAKE_PREFIX_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/libtorch ..
make &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;nproc&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Install ephemral package in Python of ReAgent&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ../../
pip &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Install spark package&lt;/span&gt;
mvn &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; preprocessing/pom.xml dependency:resolve
mvn &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; preprocessing/pom.xml package
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;going-from-a-static-decision-plan-to-a-contextual-bandit&quot;&gt;Going from a static decision plan to a contextual bandit&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&quot;http://reagent.ai/rasp_tutorial.html#makin-bacon&quot;&gt;&lt;strong&gt;Makin’ Bacon&lt;/strong&gt; example&lt;/a&gt; provided by the ReAgent documentation is splendid, explaining how we can go from a static pre-configured plan towards a dynamic plan. But what are we actually doing in this example? There are actually 3 phases:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Start - We are starting out simple with a 52% bacon chance and 48% ribs chance
    &lt;ul&gt;
      &lt;li&gt;This through a simple SoftMax ranker&lt;/li&gt;
      &lt;li&gt;We see this by running &lt;code class=&quot;highlighter-rouge&quot;&gt;heuristic.json&lt;/code&gt; in the simulator, which returns &lt;code class=&quot;highlighter-rouge&quot;&gt;{'Ribs': 471, 'Bacon': 529}&lt;/code&gt; with an average reward of &lt;code class=&quot;highlighter-rouge&quot;&gt;0.363&lt;/code&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Hindsight Analysis - No Personalization
    &lt;ul&gt;
      &lt;li&gt;When we analyze the clicks, we get: &lt;code class=&quot;highlighter-rouge&quot;&gt;88 390 266 253&lt;/code&gt; for &lt;code class=&quot;highlighter-rouge&quot;&gt;ribs_clicked, ribs_not_clicked, bacon_clicked, bacon_not_clicked&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;This translates into &lt;code class=&quot;highlighter-rouge&quot;&gt;18%&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;51%&lt;/code&gt; for &lt;code class=&quot;highlighter-rouge&quot;&gt;ribs&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;bacon&lt;/code&gt; respectively on the click-through rate!
        &lt;ul&gt;
          &lt;li&gt;Initial Observation here is that we can see that people are more likely to click when they see bacon! (since they aren’t rib lovers)&lt;/li&gt;
          &lt;li&gt;We can adapt the decision plan!&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;We will use a &lt;code class=&quot;highlighter-rouge&quot;&gt;multi-armed bandit&lt;/code&gt; through the &lt;code class=&quot;highlighter-rouge&quot;&gt;UCB1 bandit ranker&lt;/code&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;strong&gt;Note:&lt;/strong&gt; Multi-armed bandits will not take into account any state!&lt;/li&gt;
          &lt;li&gt;We now see a score of &lt;code class=&quot;highlighter-rouge&quot;&gt;0.497&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;{'Bacon': 926, 'Ribs': 74}&lt;/code&gt; - Since we want to show more bacon due to the click-through rate!&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Smart Analysis - Personalization
    &lt;ul&gt;
      &lt;li&gt;Our code has been running for a while now and we found an extra parameter that can help this tune for our customers! &lt;code class=&quot;highlighter-rouge&quot;&gt;isUserARibLover&lt;/code&gt;! If this is &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt; then it’s a Ribs lover, else it’s a Bacon lover.&lt;/li&gt;
      &lt;li&gt;After training this through the dqn workflow, we will see that context is now taken into account and we receive a reward of &lt;code class=&quot;highlighter-rouge&quot;&gt;0.52&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;{'Bacon': 883, 'Ribs': 117}&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We are now done and understand how the ReAgent framework works. Time to get started ourselves! (that is for a later post though)&lt;/p&gt;</content><author><name>Xavier Geerinck</name></author><category term="azure" /><category term="ai" /><category term="ai-rl" /><category term="ai-ml" /><summary type="html">Facebook decided to release their end-to-end applied reinforcement learning platform called ReAgent, after reading their vision on this, I have to say that I am completely hooked! They are providing an excellent view of Reinforcement Learning and the future adoption of it. But why is this and how can we get started with it?</summary></entry><entry><title type="html">An E2E Azure Sphere project in the area of Smart Retail (RFID RC522, AVNet MT3620 SK, Izokee Display)</title><link href="/azure-sphere-mt3620-avnet" rel="alternate" type="text/html" title="An E2E Azure Sphere project in the area of Smart Retail (RFID RC522, AVNet MT3620 SK, Izokee Display)" /><published>2019-09-01T09:00:00+00:00</published><updated>2019-09-01T09:00:00+00:00</updated><id>/azure-sphere-mt3620-avnet</id><content type="html" xml:base="/azure-sphere-mt3620-avnet">&lt;h1 id=&quot;smart-retail-with-the-avnet-mt3620-starter-kit-and-an-nfc-scanner&quot;&gt;Smart Retail with the AVNet MT3620 Starter Kit and an NFC scanner&lt;/h1&gt;

&lt;p&gt;Avnet just released an &lt;a href=&quot;https://www.avnet.com/shop/us/products/avnet-engineering-services/aes-ms-mt3620-sk-g-3074457345636825680/&quot;&gt;MT3620 Azure Sphere Development Kit&lt;/a&gt; with a &lt;a href=&quot;https://www.element14.com/community/community/designcenter/azure-sphere-starter-kits?ICID=azuresphere-sensingWorldCH-doc&quot;&gt;contest&lt;/a&gt; related to it.&lt;/p&gt;

&lt;h2 id=&quot;project-description&quot;&gt;Project Description&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Title:&lt;/strong&gt; How IoT can play a secure role in the world of Smart Retail&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description:&lt;/strong&gt; In retail the most important thing while walking through the store is the labels displaying the price of an item. With this project I want to display how you can utilize small form factor devices to dynamically update these prices from cloud to edge. I want to demonstrate this through an LCD display that displays the item name and price. Once we then hold and RFID tag in front of an RFID Scanner it will pull the information from its local database. When we then perform a Twin Update, we will change this local database information and re-scan the tag to demonstrate this. With this we want to demonstrate the following technolgies: IoT Twins, Azure IoT Hub, IoT Edge, RFID Scanner, OLED Screens, SPI connection and I2C connection.&lt;/p&gt;

&lt;p&gt;Breaking this up into bullet points, we will thus perform the following actions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Connect an OLED screen&lt;/li&gt;
  &lt;li&gt;Connect an RFID Scanner&lt;/li&gt;
  &lt;li&gt;Fetch information from a specific rfid tag and fetch product information from the local database&lt;/li&gt;
  &lt;li&gt;Adapt the information of the local database, re-scan the rfid token and show the updated information on the OLED screen&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;hardware&quot;&gt;Hardware&lt;/h2&gt;

&lt;h3 id=&quot;avnet-mt3620&quot;&gt;Avnet MT3620&lt;/h3&gt;

&lt;p&gt;So we talked about the contest, but how does our device actually look like? Well when I received it, it looked like this fresh out of the box:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/azure-sphere-avnet/device-1.jpg&quot; alt=&quot;/assets/images/posts/azure-sphere-avnet/device-1.jpg&quot; /&gt;
&lt;img src=&quot;/assets/images/posts/azure-sphere-avnet/device-2.jpg&quot; alt=&quot;/assets/images/posts/azure-sphere-avnet/device-2.jpg&quot; /&gt;
&lt;img src=&quot;/assets/images/posts/azure-sphere-avnet/device-3.jpg&quot; alt=&quot;/assets/images/posts/azure-sphere-avnet/device-3.jpg&quot; /&gt;
&lt;img src=&quot;/assets/images/posts/azure-sphere-avnet/device-4.jpg&quot; alt=&quot;/assets/images/posts/azure-sphere-avnet/device-4.jpg&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;rfid-scanner&quot;&gt;RFID Scanner&lt;/h3&gt;

&lt;p&gt;We will be utilizing a &lt;a href=&quot;https://www.nxp.com/docs/en/data-sheet/MFRC522.pdf&quot;&gt;Mifare RC522 Module RFID Reader&lt;/a&gt; as an RFID reader.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/azure-sphere-avnet/hardware-rfid-scanner.jpg&quot; alt=&quot;/assets/images/posts/azure-sphere-avnet/hardware-rfid-scanner.jpg&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;oled-screen&quot;&gt;OLED Screen&lt;/h3&gt;

&lt;p&gt;For our OLED screen I bought an &lt;a href=&quot;https://cdn-shop.adafruit.com/datasheets/SSD1306.pdf&quot;&gt;IZOKEE 0.96” I2C IIC SPI Serial 128x64 px display&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/azure-sphere-avnet/hardware-lcd-screen.jpg&quot; alt=&quot;/assets/images/posts/azure-sphere-avnet/hardware-lcd-screen.jpg&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;basic-concepts---connecting-hardware&quot;&gt;Basic Concepts - Connecting Hardware&lt;/h2&gt;

&lt;p&gt;Before we go on and connect our hardware, we should first understand some basic concepts of how hardware gets connected. This is since we want a microcontroller to communicate with small peripheral ICs such as Sensors, ADCs, DACs, …&lt;/p&gt;

&lt;h3 id=&quot;serial-peripheral-interface-spi&quot;&gt;Serial Peripheral Interface (SPI)&lt;/h3&gt;

&lt;p&gt;One of these interfaces is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interface&quot;&gt;Serial Peripheral Interface (SPI)&lt;/a&gt;. This is a “synchronous” bus where data is being sent over between a ‘master’ and a ‘slave’ and is kept in sync on both sides through the use of a “clock”. This interface has 4 logic signals:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;SCLK:&lt;/strong&gt; Serial Clock (often called &lt;strong&gt;SCK&lt;/strong&gt;)
    &lt;ul&gt;
      &lt;li&gt;Is used to keep both sides in sync, the master generates this.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;MOSI:&lt;/strong&gt; Master Output Slave Input (often called &lt;strong&gt;SDO on master&lt;/strong&gt;)
    &lt;ul&gt;
      &lt;li&gt;Data being sent from Master -&amp;gt; Slave goes over this data line&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;MISO:&lt;/strong&gt; Master Input Slave Output (often called &lt;strong&gt;SDI on master&lt;/strong&gt;)
    &lt;ul&gt;
      &lt;li&gt;Data being sent from Slave -&amp;gt; Master goes over this data line&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;SS:&lt;/strong&gt; Slave Select (often called &lt;strong&gt;CS&lt;/strong&gt;)
    &lt;ul&gt;
      &lt;li&gt;Select the correct slave and wake it up&lt;/li&gt;
      &lt;li&gt;Note: if high, then no slave is active -&amp;gt; active-low configuration&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To make this more clearer, here is a &lt;a href=&quot;https://learn.sparkfun.com/tutorials/serial-peripheral-interface-spi/all&quot;&gt;diagram&lt;/a&gt; to illustrate this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/azure-sphere-avnet/spi.png&quot; alt=&quot;/assets/images/posts/azure-sphere-avnet/spi.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;How will SPI send data now? Here a short overview:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The master sets SCLK (our clock)&lt;/li&gt;
  &lt;li&gt;The master selects the slave device (SS) with a logic level 0 on the select line&lt;/li&gt;
  &lt;li&gt;During each SPI clock cycle:
    &lt;ul&gt;
      &lt;li&gt;Master sends a bit on the MOSI line and slave reads it&lt;/li&gt;
      &lt;li&gt;Slave sends a bit on the MISO line and the master reads it&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For our &lt;strong&gt;DevKit device&lt;/strong&gt;, we can find the following about SPI in the &lt;a href=&quot;https://www.element14.com/community/docs/DOC-92359/l/azure-sphere-starter-kit-user-guide-v14?ICID=azuresphere-kit-datasheet-widget&quot;&gt;datasheet&lt;/a&gt; on page 11 and 19.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/azure-sphere-avnet/diagram.png&quot; alt=&quot;/assets/images/posts/azure-sphere-avnet/diagram.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Click Socket #1:&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Click1 Pin&lt;/th&gt;
      &lt;th&gt;Module Signal Name&lt;/th&gt;
      &lt;th&gt;Click1 Pin&lt;/th&gt;
      &lt;th&gt;Module Signal Name&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;AN&lt;/td&gt;
      &lt;td&gt;GPIO42_ADC1&lt;/td&gt;
      &lt;td&gt;PWM&lt;/td&gt;
      &lt;td&gt;GPIO0_PWM0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;RST&lt;/td&gt;
      &lt;td&gt;GPIO16&lt;/td&gt;
      &lt;td&gt;INT&lt;/td&gt;
      &lt;td&gt;GPIO2_PWM2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;CS&lt;/td&gt;
      &lt;td&gt;GPIO34_CSA1_CTS1&lt;/td&gt;
      &lt;td&gt;RX&lt;/td&gt;
      &lt;td&gt;GPIO28_MISO0_RXD0_SDA0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;SCK&lt;/td&gt;
      &lt;td&gt;GPIO31_SCLK1_TX1&lt;/td&gt;
      &lt;td&gt;TX&lt;/td&gt;
      &lt;td&gt;GPIO26_SCLK0_TXD0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;MISO&lt;/td&gt;
      &lt;td&gt;GPIO33_MISO1_RX1_DATA1&lt;/td&gt;
      &lt;td&gt;SCL&lt;/td&gt;
      &lt;td&gt;GPIO37_MOSI2_RTS2_SCL2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;MOSI&lt;/td&gt;
      &lt;td&gt;GPIO32_MOSI1_RTS1_CLK1&lt;/td&gt;
      &lt;td&gt;SDA&lt;/td&gt;
      &lt;td&gt;GPIO38_MISO2_RXD2_SDA2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;+3.3V&lt;/td&gt;
      &lt;td&gt;3V3&lt;/td&gt;
      &lt;td&gt;+5V&lt;/td&gt;
      &lt;td&gt;5V&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GND&lt;/td&gt;
      &lt;td&gt;GND&lt;/td&gt;
      &lt;td&gt;GND&lt;/td&gt;
      &lt;td&gt;GND&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;Click Socket #2:&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Click2 Pin&lt;/th&gt;
      &lt;th&gt;Module Signal Name&lt;/th&gt;
      &lt;th&gt;Click2 Pin&lt;/th&gt;
      &lt;th&gt;Module Signal Name&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;AN&lt;/td&gt;
      &lt;td&gt;GPIO43_ADC2&lt;/td&gt;
      &lt;td&gt;PWM&lt;/td&gt;
      &lt;td&gt;GPIO1_PWM1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;RST&lt;/td&gt;
      &lt;td&gt;GPIO17&lt;/td&gt;
      &lt;td&gt;INT&lt;/td&gt;
      &lt;td&gt;GPIO2_PWM2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;CS&lt;/td&gt;
      &lt;td&gt;GPIO35_CSB0&lt;/td&gt;
      &lt;td&gt;RX&lt;/td&gt;
      &lt;td&gt;GPIO28_MISO0_RXD0_SDA0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;SCK&lt;/td&gt;
      &lt;td&gt;GPIO31_SCLK1_TX1&lt;/td&gt;
      &lt;td&gt;TX&lt;/td&gt;
      &lt;td&gt;GPIO26_SCLK0_TXD0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;MISO&lt;/td&gt;
      &lt;td&gt;GPIO33_MISO1_RX1_DATA1&lt;/td&gt;
      &lt;td&gt;SCL&lt;/td&gt;
      &lt;td&gt;GPIO37_MOSI2_RTS2_SCL2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;MOSI&lt;/td&gt;
      &lt;td&gt;GPIO32_MOSI1_RTS1_CLK1&lt;/td&gt;
      &lt;td&gt;SDA&lt;/td&gt;
      &lt;td&gt;GPIO38_MISO2_RXD2_SDA2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;+3.3V&lt;/td&gt;
      &lt;td&gt;3V3&lt;/td&gt;
      &lt;td&gt;+5V&lt;/td&gt;
      &lt;td&gt;5V&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GND&lt;/td&gt;
      &lt;td&gt;GND&lt;/td&gt;
      &lt;td&gt;GND&lt;/td&gt;
      &lt;td&gt;GND&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;connecting-azure-sphere-and-our-hardware&quot;&gt;Connecting Azure Sphere and our Hardware&lt;/h2&gt;

&lt;h3 id=&quot;activate-network-and-claim-the-device&quot;&gt;Activate network and Claim the device&lt;/h3&gt;

&lt;p&gt;First off when we receive a new Azure Sphere device is to &lt;a href=&quot;https://docs.microsoft.com/en-us/azure-sphere/install/configure-wifi&quot;&gt;activate its network&lt;/a&gt; and &lt;a href=&quot;https://docs.microsoft.com/en-us/azure-sphere/install/claim-device&quot;&gt;claim it&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Special at Azure Sphere is that these devices always have a radio built in, enabling network connectivity.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;activating-network&quot;&gt;Activating Network&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Show the status of the WiFi connection&lt;/span&gt;
azsphere device wifi show-status

&lt;span class=&quot;c&quot;&gt;# Connect the device to WiFi&lt;/span&gt;
azsphere device wifi add &lt;span class=&quot;nt&quot;&gt;--ssid&lt;/span&gt; &amp;lt;yourSSID&amp;gt; &lt;span class=&quot;nt&quot;&gt;--key&lt;/span&gt; &amp;lt;yourKey&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;claiming-the-device&quot;&gt;Claiming the device&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Login to Azure and see the tenants&lt;/span&gt;
azsphere login

&lt;span class=&quot;c&quot;&gt;# Select the tenant (XavierAzureSphereTenant)&lt;/span&gt;
azsphere tenant &lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; aca3da0d-5493-45e6-aea2-85c47962770d

&lt;span class=&quot;c&quot;&gt;# Claim the device&lt;/span&gt;
azsphere device claim
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;enabling-debugging-on-our-azure-sphere&quot;&gt;Enabling debugging on our Azure Sphere&lt;/h3&gt;

&lt;p&gt;Before we can now get started and deploy code on our Azure Sphere, we have to configure it so it allows sideloading. For that just execute the command &lt;code class=&quot;highlighter-rouge&quot;&gt;azsphere device prep-debug&lt;/code&gt; which will configure the device and reboot it so we are ready to go!&lt;/p&gt;

&lt;h3 id=&quot;connecting-the-rfid-scanner&quot;&gt;Connecting the RFID Scanner&lt;/h3&gt;

&lt;p&gt;Since we learned what the SPI interface is, we can now connect our RFID scanner. For that just connect the corresponding pins on the RFID scanner with the ones on our devkit as shown here. For this we look at the SPI details in the &lt;a href=&quot;https://www.nxp.com/docs/en/data-sheet/MFRC522.pdf&quot;&gt;datasheet&lt;/a&gt; on page 9. Here we find the following:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;PIN&lt;/th&gt;
      &lt;th&gt;UART(input)&lt;/th&gt;
      &lt;th&gt;SPI (output)&lt;/th&gt;
      &lt;th&gt;I2C-bus (I/O)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;SDA&lt;/td&gt;
      &lt;td&gt;RX&lt;/td&gt;
      &lt;td&gt;NSS&lt;/td&gt;
      &lt;td&gt;SDA&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;I2C&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;EA&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;EA&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;D7&lt;/td&gt;
      &lt;td&gt;TX&lt;/td&gt;
      &lt;td&gt;MISO&lt;/td&gt;
      &lt;td&gt;SCL&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;D6&lt;/td&gt;
      &lt;td&gt;MX&lt;/td&gt;
      &lt;td&gt;MOSI&lt;/td&gt;
      &lt;td&gt;ADR_0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;D5&lt;/td&gt;
      &lt;td&gt;DTRQ&lt;/td&gt;
      &lt;td&gt;SCK&lt;/td&gt;
      &lt;td&gt;ADR_1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;D4&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;ADR_2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;D3&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;ADR_3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;D2&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;ADR_4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;D1&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;ADR_5&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Where we see that for SPI we need to utilize &lt;strong&gt;NSS, MISO, MOSI, SCK&lt;/strong&gt; on our development board, which refer to &lt;strong&gt;SDA, MISO, MOSI, SCK&lt;/strong&gt; on the RFID scanner.&lt;/p&gt;

&lt;p&gt;Once connected, we will have this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/azure-sphere-avnet/hardware-connected-rfid-1.jpg&quot; alt=&quot;/assets/images/posts/azure-sphere-avnet/hardware-connected-rfid-1.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/azure-sphere-avnet/hardware-connected-rfid-2.jpg&quot; alt=&quot;/assets/images/posts/azure-sphere-avnet/hardware-connected-rfid-2.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/azure-sphere-avnet/hardware-connected-rfid-3.jpg&quot; alt=&quot;/assets/images/posts/azure-sphere-avnet/hardware-connected-rfid-3.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Drawing this out, we will get:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;RFID&lt;/th&gt;
      &lt;th&gt;DEVICE&lt;/th&gt;
      &lt;th&gt;COLOR&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;SDA&lt;/td&gt;
      &lt;td&gt;CS&lt;/td&gt;
      &lt;td&gt;GREEN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;SCK&lt;/td&gt;
      &lt;td&gt;SCK&lt;/td&gt;
      &lt;td&gt;PURPLE&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;MOSI&lt;/td&gt;
      &lt;td&gt;SDO&lt;/td&gt;
      &lt;td&gt;GREY&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;MISO&lt;/td&gt;
      &lt;td&gt;SDI&lt;/td&gt;
      &lt;td&gt;WHITE&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;RQ&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GND&lt;/td&gt;
      &lt;td&gt;GND&lt;/td&gt;
      &lt;td&gt;BLACK&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;RST&lt;/td&gt;
      &lt;td&gt;RST&lt;/td&gt;
      &lt;td&gt;YELLOW&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3.3V&lt;/td&gt;
      &lt;td&gt;3V3&lt;/td&gt;
      &lt;td&gt;BLUE&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;connecting-the-oled-screen&quot;&gt;Connecting the OLED screen&lt;/h3&gt;

&lt;p&gt;The OLED screen is quite straightforward for our project, seeing that it’s the one as shown on page 22 in the datasheet. It has the following pin connectors:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Grove Pin #&lt;/th&gt;
      &lt;th&gt;Signal Name&lt;/th&gt;
      &lt;th&gt;Signal Name&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;GND&lt;/td&gt;
      &lt;td&gt;GND&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;3V3&lt;/td&gt;
      &lt;td&gt;3V3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;SCL&lt;/td&gt;
      &lt;td&gt;GPIO37_MOSI2_RTS2_SCL2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;SDA&lt;/td&gt;
      &lt;td&gt;GPIO38_MISO2_RXD2_SDA2&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/azure-sphere-avnet/hardware-connected-lcd.jpg&quot; alt=&quot;/assets/images/posts/azure-sphere-avnet/hardware-connected-lcd.jpg&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;azure&quot;&gt;Azure&lt;/h2&gt;

&lt;p&gt;To be able to connect our device and control it, we will work with Azure. In Azure we always start off with creating a &lt;strong&gt;resource group&lt;/strong&gt; when we want to test something.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/azure-sphere-avnet/azure-create-resource-group.png&quot; alt=&quot;/assets/images/posts/azure-sphere-avnet/azure-create-resource-group.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;azure-iot-hub&quot;&gt;Azure IoT Hub&lt;/h3&gt;

&lt;p&gt;Connecting devices to cloud is done through IoT Hub, this is a service that allows us to manage our devices as well as receive / send data from / to them. For our demonstration we will choose the S1 tier.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; the F1 tier will also be sufficient but has a smaller limit of messages / day&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/azure-sphere-avnet/azure-create-iothub.png&quot; alt=&quot;/assets/images/posts/azure-sphere-avnet/azure-create-iothub.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;azure-device-provisioning&quot;&gt;Azure Device Provisioning&lt;/h3&gt;

&lt;p&gt;Now we have an IoT Hub and an IoT Edge device, how do we actually connect this device to IoT Hub? One way would be to go through the portal and create our device manually. This is however not something we want to do seeing the manual work involved, wouldn’t it be better if we could let our device handle all of this automatically?&lt;/p&gt;

&lt;p&gt;For that we have the &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/iot-dps/about-iot-dps&quot;&gt;&lt;strong&gt;Azure Device Provisioning Service&lt;/strong&gt;&lt;/a&gt;, which will  automatically provision our IoT device once it gets connected to the IoT Hub (this through a Enrollment list, but more later on that).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/azure-sphere-avnet/azure-create-dps.png&quot; alt=&quot;/assets/images/posts/azure-sphere-avnet/azure-create-dps.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once our Device Provisioning Service (DPS) has been set up, we can link our IoT Hub to it:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/azure-sphere-avnet/azure-create-dps-link-iothub.png&quot; alt=&quot;/assets/images/posts/azure-sphere-avnet/azure-create-dps-link-iothub.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The last thing we now have to do is add our device to the enrollment list, here we have the choice to add our devices through Certificates our symmetric keys. Seeing the nature of IoT Edge devices and that we want to let them be as secure as possible, we will thus utilize a Certificate for this. First we will get our device its CA certificate by running the command &lt;code class=&quot;highlighter-rouge&quot;&gt;azsphere tenant download-CA-certificate -output MyAzureSphereCACertificate.cer&lt;/code&gt;, whereafter we will add it to our DPS service and create an enrollment for it. See the pictures below on how this will look:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/azure-sphere-avnet/azure-create-dps-device-get-ca-certificate.png&quot; alt=&quot;/assets/images/posts/azure-sphere-avnet/azure-create-dps-device-get-ca-certificate.png&quot; /&gt;
&lt;img src=&quot;/assets/images/posts/azure-sphere-avnet/azure-create-dps-add-certificate.png&quot; alt=&quot;/assets/images/posts/azure-sphere-avnet/azure-create-dps-add-certificate.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now since we uploaded a certificate &lt;strong&gt;we need to verify that it’s the correct certificate&lt;/strong&gt;, for this get the code on the detail pane and verify it with &lt;code class=&quot;highlighter-rouge&quot;&gt;azsphere tenant download-validation-certificate --output MyAzureSphereVerificationCertificate.cer --verificationcode &amp;lt;code&amp;gt;&lt;/code&gt;. Whereafter we upload this to the portal.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/azure-sphere-avnet/azure-create-dps-verify-certificate.png&quot; alt=&quot;/assets/images/posts/azure-sphere-avnet/azure-create-dps-verify-certificate.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Last but not least we are now able to create an Enrollment Group where this device will be part of.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/azure-sphere-avnet/azure-create-dps-enrollment-group.png&quot; alt=&quot;/assets/images/posts/azure-sphere-avnet/azure-create-dps-enrollment-group.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now when our device connects, it will be automatically added.&lt;/p&gt;

&lt;h2 id=&quot;coding-our-project&quot;&gt;Coding our Project&lt;/h2&gt;

&lt;p&gt;Before we start coding, important to note is as well that the Azure Sphere SDK includes a set of Application Libraries (AppLibs) that make it easy for us to develop an Azure Sphere applications. For more information, check the &lt;a href=&quot;https://docs.microsoft.com/en-us/azure-sphere/reference/applibs-reference/api-overview&quot;&gt;Azure Documentation&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;code-setup&quot;&gt;Code Setup&lt;/h3&gt;

&lt;p&gt;Now, since we connected our hardware, let’s get started with coding our project. For that start off with creating a solution in Visual Studio as follows:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/azure-sphere-avnet/project-create-1.png&quot; alt=&quot;/assets/images/posts/azure-sphere-avnet/project-create-1.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/azure-sphere-avnet/project-create-2.png&quot; alt=&quot;/assets/images/posts/azure-sphere-avnet/project-create-2.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/azure-sphere-avnet/project-create-3.png&quot; alt=&quot;/assets/images/posts/azure-sphere-avnet/project-create-3.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/azure-sphere-avnet/project-create-4.png&quot; alt=&quot;/assets/images/posts/azure-sphere-avnet/project-create-4.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Since we now have a project, we now want to correct some properties:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Change the SDK to the BETA version. For this, follow &lt;a href=&quot;https://docs.microsoft.com/en-us/azure-sphere/app-development/use-beta&quot;&gt;this guide&lt;/a&gt; and select the “2+Beta1905” version.&lt;/li&gt;
  &lt;li&gt;We want to set the correct Hardware Target reference to be utilized in our app manifest. For this, we will copy over the &lt;a href=&quot;https://github.com/Azure/azure-sphere-samples/tree/master/Hardware&quot;&gt;Hardware folder from the Azure Sphere Samples&lt;/a&gt; to our project root (where our solution is sitting) as shown &lt;a href=&quot;https://docs.microsoft.com/en-us/azure-sphere/app-development/manage-hardware-dependencies&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;We want to access easy pin definitions as defined in step 2. For that, find the respective header files in the Hardware folder from step 2 and include them into your project. (for our Avnet development board, we thus have to include &lt;a href=&quot;https://raw.githubusercontent.com/Azure/azure-sphere-samples/master/Hardware/mt3620/inc/hw/mt3620.h&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mt3620.h&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/Azure/azure-sphere-samples/blob/master/Hardware/avnet_aesms_mt3620/inc/hw/avnet_aesms_mt3620.h&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;avnet_mt3620_aesms.h&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://github.com/Azure/azure-sphere-samples/blob/master/Hardware/avnet_mt3620_sk/inc/hw/avnet_mt3620_sk.h&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;avnet_mt3620_sk.h&lt;/code&gt;&lt;/a&gt;).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/azure-sphere-avnet/target-hardware.png&quot; alt=&quot;/assets/images/posts/azure-sphere-avnet/target-hardware.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;hello-world---oled-screen&quot;&gt;Hello World - OLED Screen&lt;/h3&gt;

&lt;p&gt;The easiest code samples always start with a Hello World sample, so let’s create one for the OLED display.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Seeing that the scope of this post is to actually make a fully E2E working project, we are going to skip through this quite quickly, but feel free to find the source code in the &lt;a href=&quot;https://github.com/thebillkidy/PublicProjects/tree/master/C/AzureSphere-Avnet-E2E-Project&quot;&gt;GitHub repository&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Luckily for us, Avnet already used this type of OLED screen and working source code is &lt;a href=&quot;https://github.com/CloudConnectKits/Azure_Sphere_SK_ADC_RTApp/tree/master/AvnetAzureSphereSK_OLED/AvnetStarterKitReferenceDesign&quot;&gt;available&lt;/a&gt;. Therefor we copy the following files:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;oled.h&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;oled.c&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sd1306.h&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sd1306.c&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;font.h&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We then change some parts to let it suit or needs (as well as strip unneeded code that access the accelerometer and other sensors) and add this in our &lt;strong&gt;main.c&lt;/strong&gt; code:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// OUR IMPORTS&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Start the OLED Screen&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oled_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;Log_Debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;OLED not found!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;Log_Debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;OLED found!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// Clear the buffer&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;oled_buffer_clear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// Draw the strings&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;sd1306_draw_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FONT_SIZE_TITLE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;white_pixel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;sd1306_draw_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OLED_LINE_1_X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OLED_LINE_1_Y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FONT_SIZE_LINE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;white_pixel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;sd1306_draw_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OLED_LINE_2_X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OLED_LINE_2_Y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FONT_SIZE_LINE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;white_pixel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;sd1306_draw_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OLED_LINE_3_X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OLED_LINE_3_Y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FONT_SIZE_LINE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;white_pixel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;sd1306_draw_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OLED_LINE_4_X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OLED_LINE_4_Y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FONT_SIZE_LINE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;white_pixel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// Send the buffer to OLED RAM&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;sd1306_refresh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can now see Hello World being printed on the screen:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/azure-sphere-avnet/demo-lcd-hello-world.jpg&quot; alt=&quot;/assets/images/posts/azure-sphere-avnet/demo-lcd-hello-world.jpg&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;hello-world---rfid-scanner&quot;&gt;Hello World - RFID Scanner&lt;/h3&gt;

&lt;p&gt;As a Hello World for our RFID scanner, we will be reading the version of our RFID scanner.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; this is not an easy feat since there is no library in existance for the RFID scanner that works with the Azure Sphere chipset&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For this we will rework &lt;a href=&quot;https://github.com/asif-mahmud/MIFARE-RFID-with-AVR/blob/master/lib/avr-rfid-library/lib/mfrc522.c&quot;&gt;this library&lt;/a&gt; and bake in our chip support through the &lt;a href=&quot;https://docs.microsoft.com/en-us/azure-sphere/reference/applibs-reference/applibs-spi/spi-overview&quot;&gt;SPI applibs &lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Seeing that the scope of this post is to actually make a fully E2E working project, we are going to skip through this quite quickly, but feel free to find the source code in the &lt;a href=&quot;https://github.com/thebillkidy/PublicProjects/tree/master/C/AzureSphere-Avnet-E2E-Project&quot;&gt;GitHub repository&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In short, we will adapt the read and write methods to utilize our Azure Sphere SPI interface so that they look like this:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mfrc522_write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transferCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;SPIMaster_Transfer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transfer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SPIMaster_InitTransfers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transfer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transferCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;//const uint8_t command[] = { (reg &amp;lt;&amp;lt; 1) &amp;amp; 0x7E, data };&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x7E&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;transfer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SPI_TransferFlags_Write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;transfer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;writeData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;transfer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;kt&quot;&gt;ssize_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transferredBytes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SPIMaster_TransferSequential&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spiFd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transfer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transferCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CheckTransferSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SPIMaster_TransferSequential (CTRL3_C)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transfer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transferredBytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;Log_Debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Transfer size is not correct&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mfrc522_read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;readDataResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//uint8_t readCmd = ((reg &amp;lt;&amp;lt; 1) &amp;amp; 0x7E) | 0x80; // Set bit 7 indicating it's a read command -&amp;gt; 0x80&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;readCmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x7E&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Set bit 7 indicating it's a read command -&amp;gt; 0x80&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;ssize_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transferredBytes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SPIMaster_WriteThenRead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spiFd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readCmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readCmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readDataResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readDataResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CheckTransferSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SPIMaster_WriteThenRead (CTRL3_C)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readCmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readDataResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transferredBytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;Log_Debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Transfer size is not correct&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;Log_Debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;INFO: READ=0x%02x (SPIMaster_WriteThenRead)&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;readDataResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;readDataResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can then adapt our &lt;strong&gt;main.c&lt;/strong&gt; code to initialize the RFC library and start reading the version:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// INCLUDES&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Log_Debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;IPC RFID RC522 Application Starting&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// Start the RFID Scanner&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mfrc522_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;Log_Debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;RFID Scanner not found!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;Log_Debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;RFID Scanner found!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// Look for a card&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;Log_Debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Trying to get version&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Check version of the reader&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Can be 0x91 for 1.0 or 0x92 for 2.0 -&amp;gt; https://www.nxp.com/docs/en/data-sheet/MFRC522.pdf (p66 - VersionReg register)&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mfrc522_read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VersionReg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;Log_Debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Detected version %d (Hex: %x)&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;hello-world---azure&quot;&gt;Hello World - Azure&lt;/h3&gt;

&lt;p&gt;For our Azure connectivity we want to do something very basic, here we just want to demonstrate:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Sending data to cloud&lt;/li&gt;
  &lt;li&gt;Receiving data from cloud&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Therefor we will create an application that is going to send the status of the green LED light every 10 seconds and we will utilize a Device Twin to change the status of this LED.&lt;/p&gt;

&lt;h4 id=&quot;configuring-our-app-manifest&quot;&gt;Configuring our App Manifest&lt;/h4&gt;

&lt;p&gt;The first thing we will do is to configure our &lt;code class=&quot;highlighter-rouge&quot;&gt;app_manifest.json&lt;/code&gt;:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Add the Device Provisioning Service Scope ID to the &lt;code class=&quot;highlighter-rouge&quot;&gt;CmdArgs&lt;/code&gt; block (e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;CmdArgs: [ &quot;&amp;lt;YourScopeID&amp;gt;&quot; ]&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Add the tenant id to the &lt;code class=&quot;highlighter-rouge&quot;&gt;DeviceAuthentication&lt;/code&gt; key (e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;DeviceAuthentication&quot;: &quot;00000000-0000-0000-0000-000000000000&quot;&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Set the &lt;code class=&quot;highlighter-rouge&quot;&gt;AllowedConnections&lt;/code&gt; key to allow the device provisioning service and your IoTHub connection string (e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;AllowedConnections&quot;: [ &quot;global.azure-devices-provisioning.net&quot;, &quot;MyAzureSphereIoTHub.azure-devices.net&quot; ]&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Seeing that we will let the GREEN LED blink, we need to enable Gpio pin 9 (e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;Gpio&quot;: [ 9 ]&lt;/code&gt;)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/azure-sphere-avnet/azure-create-dps-id-scope.png&quot; alt=&quot;/assets/images/posts/azure-sphere-avnet/azure-create-dps-id-scope.png&quot; /&gt;
&lt;img src=&quot;/assets/images/posts/azure-sphere-avnet/azsphere-tenant-show-selected.png&quot; alt=&quot;/assets/images/posts/azure-sphere-avnet/azsphere-tenant-show-selected.png&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;writing-our-code&quot;&gt;Writing our Code&lt;/h4&gt;

&lt;p&gt;First we configure our project by opening the &lt;code class=&quot;highlighter-rouge&quot;&gt;.vcxproj&lt;/code&gt; in a text editor and adding the following in the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;Link&amp;gt;&lt;/code&gt; tags:&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;AdditionalLibraryDirectories&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Condition=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;'$(Configuration)|$(Platform)'=='Debug|ARM'&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; .\azureiot\lib;%(AdditionalLibraryDirectories)&lt;span class=&quot;nt&quot;&gt;&amp;lt;/AdditionalLibraryDirectories&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;AdditionalDependencies&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Condition=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;'$(Configuration)|$(Platform)'=='Debug|ARM'&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;-lm;-lazureiot;%(AdditionalDependencies)&lt;span class=&quot;nt&quot;&gt;&amp;lt;/AdditionalDependencies&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;AdditionalLibraryDirectories&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Condition=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;'$(Configuration)|$(Platform)'=='Release|ARM'&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; .\azureiot\lib;%(AdditionalLibraryDirectories)&lt;span class=&quot;nt&quot;&gt;&amp;lt;/AdditionalLibraryDirectories&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;AdditionalDependencies&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Condition=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;'$(Configuration)|$(Platform)'=='Release|ARM'&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;-lm;-lazureiot;%(AdditionalDependencies)&lt;span class=&quot;nt&quot;&gt;&amp;lt;/AdditionalDependencies&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Making it look like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/azure-sphere-avnet/vstudio-extra-link-dependencies.png&quot; alt=&quot;/assets/images/posts/azure-sphere-avnet/vstudio-extra-link-dependencies.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Luckily for us, the &lt;code class=&quot;highlighter-rouge&quot;&gt;azureiot&lt;/code&gt; files are included through the Azure Sphere SDK installation (typically in &lt;code class=&quot;highlighter-rouge&quot;&gt;C:\Program Files (x86)\Microsoft Azure Sphere SDK\Sysroots\2+Beta1905\usr\include\azureiot\&lt;/code&gt;), so we can have the following includes defined:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Azure IoT SDK&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;azureiot/iothub_client_core_common.h&amp;gt;
#include &amp;lt;azureiot/iothub_device_client_ll.h&amp;gt;
#include &amp;lt;azureiot/iothub_client_options.h&amp;gt;
#include &amp;lt;azureiot/iothubtransportmqtt.h&amp;gt;
#include &amp;lt;azureiot/iothub.h&amp;gt;
#include &amp;lt;azureiot/azure_sphere_provisioning.h&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For the rest of our code, we will be utilizing one of the &lt;a href=&quot;https://github.com/Azure/azure-sphere-samples/tree/master/Samples/AzureIoT/AzureIoT&quot;&gt;Azure Sphere examples&lt;/a&gt; that we adapt to only include the LED light and Twin functionality. When we then run this, we see:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Remote debugging from host 192.168.35.1
Application Starting
Setting Azure Scope ID 0ne000777D8
Opening GREEN LED as output
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Azure IoT] Using HSM cert at /run/daa/aca3da0d-5493-45e6-aea2-85c47962770d
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;IoTHub][INFO] IoTHubDeviceClient_LL_CreateWithAzureSphereDeviceAuthProvisioning returned &lt;span class=&quot;s1&quot;&gt;'AZURE_SPHERE_PROV_RESULT_OK'&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;IoTHub][INFO] Configuring Device Twin Callback and Connection Status Callback
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;IoTHub][INFO] Sending IoT Hub Message: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Test&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;Hello World&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;IoTHub][INFO] IoTHubClient accepted the message &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;delivery
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;IoTHub][INFO] Received IoT Twin Update from IoT Hub
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;IoTHub][INFO] Changing Status LED to &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;IoTHub][INFO] Reported state &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'MyGreenLED'&lt;/span&gt; to value &lt;span class=&quot;s1&quot;&gt;'true'&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;IoTHub][INFO] Sending IoT Hub Message: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Test&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;Hello World&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;IoTHub][INFO] IoTHubClient accepted the message &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;delivery
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;IoTHub][INFO] Message received by IoT Hub. Result is: 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Initially I got &lt;code class=&quot;highlighter-rouge&quot;&gt;IOTHUB_CLIENT_CONNECTION_NO_NETWORK&lt;/code&gt;, which was because I forgot to configure my IoT Hub endpoint in the &lt;code class=&quot;highlighter-rouge&quot;&gt;app_manifest.json&lt;/code&gt; file under &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;AllowedConnections&quot;&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For the full code, please see the &lt;a href=&quot;https://github.com/thebillkidy/PublicProjects/tree/master/C/AzureSphere-Avnet-E2E-Project&quot;&gt;GitHub repository&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;rfid-scanner--oled-screen-for-serial-reading&quot;&gt;RFID Scanner + OLED Screen for Serial Reading&lt;/h3&gt;

&lt;p&gt;The next step we will now do before connecting it all to cloud is to be able to read the tags from our RFID Tags and display their serial number. Seeing the 2 hello world examples this should be trivial to do now. Therefor we copy everything from the 2 hello world projects into 1 project and use the following &lt;strong&gt;main.c&lt;/strong&gt; file that will display some information in-between and will read and display the serial every time the tag is presented.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;main.c&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// INCLUDES...&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// DECLARE FUNCTIONS...&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;InitPeripherals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Log_Debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[OLED] Initializing&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oled_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;Log_Debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;OLED not found!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;Log_Debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;OLED found!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;Log_Debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[MFRC522] Initializing&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mfrc522_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;Log_Debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;RFID Scanner not found!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;Log_Debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;RFID Scanner found!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InitPeripherals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;Log_Debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Error, exiting!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;oled_template_waiting_for_rfc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// Get Card Version&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Log_Debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Trying to get version&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 0x91 = 1.0, 0x92 = 0.2 -&amp;gt; https://www.nxp.com/docs/en/data-sheet/MFRC522.pdf (p66 - VersionReg register)&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;readerVersion&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mfrc522_read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VersionReg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;Log_Debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Detected version %d (Hex: %x)&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;readerVersion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;readerVersion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;oled_template_waiting_for_rfc_with_version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readerVersion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// Prepare for reading tags&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mfrc522_read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ComIEnReg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mfrc522_write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ComIEnReg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mfrc522_read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DivIEnReg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mfrc522_write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DivIEnReg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// Look for a card&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Commands: https://www.nxp.com/docs/en/data-sheet/MFRC522.pdf P36&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MAX_LEN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mfrc522_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PICC_REQALL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Find all the cards antenna area&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CARD_FOUND&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;Log_Debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[MFRC522] Found a card: %x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

			&lt;span class=&quot;n&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mfrc522_get_card_serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CARD_FOUND&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;Log_Debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[MFRC522] Dumping: %x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

				&lt;span class=&quot;c1&quot;&gt;// Convert the byte array to a string of bytes&lt;/span&gt;
				&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hexstr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;btox&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hexstr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;hexstr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;Log_Debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hexstr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;oled_template_show_serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hexstr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

				&lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;Log_Debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[MFRC522] Error while reading card&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// Todo: close SPI here&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;btox&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;0123456789ABCDEF&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;oled_template_waiting_for_rfc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Clear the buffer&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;oled_buffer_clear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// Draw the strings&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;sd1306_draw_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Information&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FONT_SIZE_TITLE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;white_pixel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;sd1306_draw_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OLED_LINE_1_X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OLED_LINE_1_Y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Waiting for tag to&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FONT_SIZE_LINE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;white_pixel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;sd1306_draw_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OLED_LINE_2_X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OLED_LINE_2_Y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;be detected&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FONT_SIZE_LINE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;white_pixel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// Send the buffer to OLED RAM&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;sd1306_refresh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;oled_template_waiting_for_rfc_with_version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Clear the buffer&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;oled_buffer_clear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// Draw the strings&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;sd1306_draw_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Information&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FONT_SIZE_TITLE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;white_pixel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;sd1306_draw_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OLED_LINE_1_X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OLED_LINE_1_Y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Waiting for tag to&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FONT_SIZE_LINE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;white_pixel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;sd1306_draw_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OLED_LINE_2_X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OLED_LINE_2_Y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;be detected&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FONT_SIZE_LINE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;white_pixel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;versionBuffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;sprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;versionBuffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;MIFARE Version = %x&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;sd1306_draw_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OLED_LINE_3_X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OLED_LINE_3_Y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;versionBuffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FONT_SIZE_LINE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;white_pixel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// Send the buffer to OLED RAM&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;sd1306_refresh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;oled_template_show_serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Clear the buffer&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;oled_buffer_clear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// Draw the strings&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;sd1306_draw_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Information&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FONT_SIZE_TITLE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;white_pixel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;sd1306_draw_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OLED_LINE_1_X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OLED_LINE_1_Y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Serial:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FONT_SIZE_LINE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;white_pixel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;sd1306_draw_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OLED_LINE_2_X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OLED_LINE_2_Y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FONT_SIZE_LINE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;white_pixel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// Send the buffer to OLED RAM&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;sd1306_refresh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;putting-it-all-together---rfid--oled--azure&quot;&gt;Putting it all together - RFID + OLED + Azure&lt;/h3&gt;

&lt;p&gt;Since we have the basic functionality done now, we want to put it all together. When we scan a RFID tag, we look in a local array for the price information and display this on screen. By utilizing Azure we will now add the functionality to update this price information through &lt;strong&gt;Device Twins&lt;/strong&gt; as well as &lt;strong&gt;send an event to IoTHub&lt;/strong&gt; stating our scanned tag and price identified.&lt;/p&gt;

&lt;p&gt;Doing this will require a few things that we will do (not displayed here for shortness reasons, see source code):&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Add a custom event handler for the RFID and merge the code in there&lt;/li&gt;
  &lt;li&gt;Add OLED display methods for displaying the price&lt;/li&gt;
  &lt;li&gt;Including a &lt;a href=&quot;https://github.com/rxi/map/blob/master/src/&quot;&gt;MAP datastructure&lt;/a&gt; that we can utilize to hold our price for the tags&lt;/li&gt;
  &lt;li&gt;Updating the Azure Twin so that we are able to update the price for the tags through the Device Twin (cloud to device)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Once we adapted our code to incorporate this, we can then see something like this when testing (added comments for clarity)&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Remote debugging from host 192.168.35.1
&lt;span class=&quot;c&quot;&gt;# 1. Initializing the application&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Application][INFO] Starting
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Application][INFO] Setting Azure Scope ID &amp;lt;MASKED&amp;gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;OLED][INFO] Initializing
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;OLED][INFO] OLED found!
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;MFRC522][INFO] Initializing
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;MFRC522][SPI][INFO] Initializing
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;MFRC522][SPI][INFO] Opened SPI Interface
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;MFRC522][SPI][INFO] BusSpeed &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 4000000
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;MFRC522][SPI][INFO] SPIMode &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;MFRC522][SPI][INFO] BitOrder &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; SPI_BitOrder_MsbFirst
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;MFRC522][SPI][INFO] FD Set on 4
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;MFRC522][SPI][INFO] Initialized
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;MFRC522][INFO] RFID Scanner found!
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;ePoll][INFO] Initializing
&lt;span class=&quot;c&quot;&gt;# 2. Detecting the scanner version&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;MFRC522][INFO] Trying to get version
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;MFRC522][INFO] Detected version 146 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Hex: 92&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;MFRC522][INFO] Waiting &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;IoTHub Connection
&lt;span class=&quot;c&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;MFRC522][INFO] Waiting &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;IoTHub Connection
&lt;span class=&quot;c&quot;&gt;# 3. Configuring our IoT Hub Connection&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Azure IoT] Using HSM cert at /run/daa/&amp;lt;MASKED&amp;gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;IoTHub][INFO] IoTHubDeviceClient_LL_CreateWithAzureSphereDeviceAuthProvisioning returned &lt;span class=&quot;s1&quot;&gt;'AZURE_SPHERE_PROV_RESULT_OK'&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;IoTHub][INFO] Configuring Device Twin Callback and Connection Status Callback
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;IoTHub][INFO] IoT Hub Authenticated: IOTHUB_CLIENT_CONNECTION_OK
&lt;span class=&quot;c&quot;&gt;# 4. Handling the Azure Device Twin Update&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;IoTHub][INFO] Received IoT Twin Update from IoT Hub
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;IoTHub][Twin][INFO] Updating PriceMap
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;IoTHub][Twin][INFO] 8804399D -&amp;gt; Zombie: &lt;span class=&quot;nv&quot;&gt;$15&lt;/span&gt;.50
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;IoTHub][Twin][INFO] Updating price &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;7908C820 to Normal: &lt;span class=&quot;nv&quot;&gt;$14&lt;/span&gt;.11
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;IoTHub][ERROR] Reported state &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'7908C820'&lt;/span&gt; to value &lt;span class=&quot;s1&quot;&gt;'Normal: $14.11'&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;IoTHub][Twin][INFO] 88041B9D -&amp;gt; Skeleton: &lt;span class=&quot;nv&quot;&gt;$20&lt;/span&gt;.00
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;IoTHub][INFO] Device Twin reported properties update result: HTTP status code 400
&lt;span class=&quot;c&quot;&gt;# 5. Reading our card and displaying it to the screen&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;MFRC522][INFO] Found a card: 1
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;MFRC522][INFO] Dumping: 79
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;MFRC522][INFO] Dumping: 8
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;MFRC522][INFO] Dumping: c8
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;MFRC522][INFO] Dumping: 20
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;MFRC522][INFO] Dumping: 99
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;MFRC522][INFO] Dumping: 0
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;MFRC522][INFO] Dumping: 0
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;MFRC522][INFO] Dumping: 0
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;MFRC522][INFO] Serial: 7908C820
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;MAP][INFO] Map Price: Normal: &lt;span class=&quot;nv&quot;&gt;$14&lt;/span&gt;.11
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;testing&quot;&gt;Testing&lt;/h3&gt;

&lt;p&gt;When we test this in real life, we will see something as shown in the videos below. What we see here is the scanning of tags on the device, executing a twin update and seeing the updated price on the device. Note that we also show the event data being sent to Azure through a consumer. This consumer is quite basic and looks like this:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;./config&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Client&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;azure-event-hubs&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;connectionString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;lt;YOUR_IOTHUB_CONNECTION_STRING&amp;gt;&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;consumerGroup&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;$Default&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;printError&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fromConnectionString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;connectionString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getPartitionIds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;partitionIds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;partitionIds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;partitionId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createReceiver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;consumerGroup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;partitionId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;startAfterTime&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;receiver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`[Receiver] Created partition receiver: [&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;partitionId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;] for consumerGroup [&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;consumerGroup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;]`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;receiver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;errorReceived&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;printError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;receiver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`[Receiver][&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;consumerGroup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;partitionId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;] Message received: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;printError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;screencast&lt;/strong&gt;&lt;/p&gt;

&lt;video width=&quot;960&quot; height=&quot;540&quot; controls=&quot;&quot; autoplay=&quot;&quot;&gt;
  &lt;source src=&quot;/assets/images/posts/azure-sphere-avnet/video-screencast.mp4&quot; type=&quot;video/mp4&quot; /&gt;
Your browser does not support the video tag.
&lt;/video&gt;

&lt;p&gt;&lt;strong&gt;device&lt;/strong&gt;&lt;/p&gt;

&lt;video width=&quot;640&quot; height=&quot;480&quot; controls=&quot;&quot; autoplay=&quot;&quot;&gt;
  &lt;source src=&quot;/assets/images/posts/azure-sphere-avnet/video-hardware.mp4&quot; type=&quot;video/mp4&quot; /&gt;
Your browser does not support the video tag.
&lt;/video&gt;

&lt;p&gt;To see the full code that was used to create this example, feel free to check this repository: &lt;a href=&quot;https://github.com/thebillkidy/PublicProjects/tree/master/C/AzureSphere-Avnet-E2E-Project&quot;&gt;https://github.com/thebillkidy/PublicProjects/tree/master/C/AzureSphere-Avnet-E2E-Project&lt;/a&gt;.&lt;/p&gt;</content><author><name>Xavier Geerinck</name></author><category term="azure" /><category term="coding-c" /><summary type="html">Smart Retail with the AVNet MT3620 Starter Kit and an NFC scanner</summary></entry><entry><title type="html">Utilizing OpenCV in C# .NET Core to grab frames from a video</title><link href="/opencv-in-dotnet-core" rel="alternate" type="text/html" title="Utilizing OpenCV in C# .NET Core to grab frames from a video" /><published>2019-08-27T09:00:00+00:00</published><updated>2019-08-27T09:00:00+00:00</updated><id>/opencv-in-dotnet-core</id><content type="html" xml:base="/opencv-in-dotnet-core">&lt;p&gt;While working on a blog post where I was utilizing .NET Core I wanted to be able to utilize OpenCV. &lt;a href=&quot;https://opencv.org/&quot;&gt;OpenCV&lt;/a&gt; is a library of functions that allow us to quickly perform computer vision tasks (e.g. making a picture black and white, canny edge, face recognition, …). But how do we utilize this in .NET Core?&lt;/p&gt;

&lt;p&gt;For the example in this Blog Post, we will work on the use case of &lt;strong&gt;extracting frames from a video file&lt;/strong&gt; and saving these individually.&lt;/p&gt;

&lt;h2 id=&quot;installing-opencv&quot;&gt;Installing OpenCV&lt;/h2&gt;

&lt;p&gt;To install OpenCV, we will utilize a docker container (since most of our applications run there nowadays anyways). The following will take care of :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Downloading and installing OpenCV&lt;/li&gt;
  &lt;li&gt;Downloading and installing OpenCV-Contrib&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM microsoft/dotnet:2.1-sdk AS build-env
MAINTAINER Xavier Geerinck &amp;lt;xageerin@microsoft.com&amp;gt;

ENV &lt;span class=&quot;nv&quot;&gt;OPENCV_VERSION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;4.1.1&quot;&lt;/span&gt;
ENV &lt;span class=&quot;nv&quot;&gt;OPENCV_INSTALLATION_DIR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/opt/opencv/&quot;&lt;/span&gt;
ENV &lt;span class=&quot;nv&quot;&gt;OPENCV_SHARP_VERSION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;4.1.0.20190417&quot;&lt;/span&gt;

WORKDIR /app

&lt;span class=&quot;c&quot;&gt;# =================================&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Install OpenCV 4 &amp;amp; OpenCV_contrib&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# =================================&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Update Packages&lt;/span&gt;
RUN &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt update
RUN &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;build-essential checkinstall cmake pkg-config yasm
RUN &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;git gfortran
RUN &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;libjpeg8-dev libjpeg-dev libpng-dev
RUN &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;libjasper1
RUN &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;libtiff-dev
RUN &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;libavcodec-dev libavformat-dev libswscale-dev libdc1394-22-dev
RUN &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;libxine2-dev libv4l-dev
RUN &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev
RUN &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;libgtk2.0-dev libtbb-dev qt5-default
RUN &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;libatlas-base-dev
RUN &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;libfaac-dev libmp3lame-dev libtheora-dev
RUN &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;libvorbis-dev libxvidcore-dev
RUN &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;libopencore-amrnb-dev libopencore-amrwb-dev
RUN &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;libavresample-dev
RUN &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;x264 v4l-utils
RUN &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;libprotobuf-dev protobuf-compiler
RUN &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;libgoogle-glog-dev libgflags-dev
RUN &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;libgphoto2-dev libeigen3-dev libhdf5-dev doxygen
RUN &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;libtbb2 libjasper-dev libdc1394-22-dev

&lt;span class=&quot;c&quot;&gt;# Download version&lt;/span&gt;
RUN &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;OPENCV_INSTALLATION_DIR&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
RUN wget https://github.com/opencv/opencv/archive/&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;OPENCV_VERSION&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;.zip &lt;span class=&quot;nt&quot;&gt;-Oopencv-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;OPENCV_VERSION&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;.zip
RUN unzip opencv-&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;OPENCV_VERSION&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;.zip
RUN wget https://github.com/opencv/opencv_contrib/archive/&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;OPENCV_VERSION&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;.zip &lt;span class=&quot;nt&quot;&gt;-Oopencv_contrib-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;OPENCV_VERSION&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;.zip
RUN unzip opencv_contrib-&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;OPENCV_VERSION&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;.zip

&lt;span class=&quot;c&quot;&gt;# Install OpenCV&lt;/span&gt;
RUN &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;opencv-&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;OPENCV_VERSION&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
RUN &lt;span class=&quot;nb&quot;&gt;mkdir &lt;/span&gt;build &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;build
RUN cmake .. &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;-DCMAKE_BUILD_TYPE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Release &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;-DOPENCV_EXTRA_MODULES_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;../../opencv_contrib-4.1.0/modules &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	&lt;span class=&quot;c&quot;&gt;# you might want to specify other CMake flags through -Dflag=value&lt;/span&gt;
RUN &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;make &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; ^processor /proc/cpuinfo&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
RUN &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;make &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-j8&lt;/span&gt;
RUN &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ldconfig

&lt;span class=&quot;c&quot;&gt;# Copy libs&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#RUN cd $OPENCV_INSTALLATION_DIR/lib&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#RUN cp -r * /usr/lib&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;installing-opencv-sharp&quot;&gt;Installing OpenCV Sharp&lt;/h2&gt;

&lt;p&gt;To utilize OpenCV in .NET we luckily have access to a wrapper library called &lt;a href=&quot;https://github.com/shimat/opencvsharp&quot;&gt;OpenCVSharp&lt;/a&gt;. So we will add this to our Dockerfile to be installed:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# =================================&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Install OpenCV Sharp&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# =================================&lt;/span&gt;
RUN &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;OPENCV_INSTALLATION_DIR&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
RUN git clone https://github.com/shimat/opencvsharp.git opencvsharp
RUN &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;opencvsharp
RUN git fetch &lt;span class=&quot;nt&quot;&gt;--all&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--tags&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--prune&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git checkout &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;OPENCV_SHARP_VERSION&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
RUN &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;src
RUN &lt;span class=&quot;nb&quot;&gt;mkdir &lt;/span&gt;build
RUN &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;build
RUN cmake &lt;span class=&quot;nt&quot;&gt;-D&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;CMAKE_INSTALL_PREFIX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;OPENCV_INSTALLATION_DIR&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; ..
RUN &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;make &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; ^processor /proc/cpuinfo&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
RUN &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;make &lt;span class=&quot;nb&quot;&gt;install
&lt;/span&gt;RUN &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ldconfig
RUN &lt;span class=&quot;nb&quot;&gt;sudo cp &lt;/span&gt;OpenCvSharpExtern/libOpenCvSharpExtern.so /usr/lib
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;creating-our-project&quot;&gt;Creating our project&lt;/h2&gt;

&lt;p&gt;For our project we will now create a dotnet project, here we will simply take an existing &lt;code class=&quot;highlighter-rouge&quot;&gt;mp4&lt;/code&gt; file and process it in our code.&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nf&quot;&gt;Process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;./out.mp4&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;videoPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$&quot;[VideoProcessor] Processing videoPath &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;videoPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[VideoProcessor] &quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Exists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;videoPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Video exists&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Video does not exist&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;VideoCapture&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;capture&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;VideoCapture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;videoPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// using (Window window = new Window(&quot;capture&quot;))&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Mat&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Mat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Frame image buffer&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;frameIndex&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// Loop while we can read an image (aka: image.Empty is not true)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// Read the next&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;capture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

			&lt;span class=&quot;c1&quot;&gt;// We only want to save every FPS hit since we have 1 image per second -&amp;gt; mod&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frameIndex&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;capture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Fps&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;saveResult&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;SaveImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$&quot;image_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frameIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;.png&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$&quot;[VideoProcessor] Saved image #&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frameIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

			&lt;span class=&quot;n&quot;&gt;frameIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;++;&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$&quot;[VideoProcessor] Done Processing&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;deploying-our-project-with-docker&quot;&gt;Deploying our Project with Docker&lt;/h2&gt;

&lt;p&gt;To deploy our project, we now need of course to adapt our Dockerfile as well. To do this we will add the following code:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# =================================&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Install our .NET project&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# =================================&lt;/span&gt;
COPY &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.csproj ./
RUN dotnet restore

COPY &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; ./
RUN dotnet publish &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; Release &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; out

FROM microsoft/dotnet:2.1-runtime-stretch-slim
WORKDIR /app
COPY &lt;span class=&quot;nt&quot;&gt;--from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;build-env /app/out ./

RUN useradd &lt;span class=&quot;nt&quot;&gt;-ms&lt;/span&gt; /bin/bash moduleuser
USER moduleuser

ENTRYPOINT &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;dotnet&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;ModuleFilterCamera.dll&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We are now done and are able to utilize OpenCV in dotnet core!&lt;/p&gt;</content><author><name>Xavier Geerinck</name></author><category term="azure" /><category term="coding-csharp" /><summary type="html">While working on a blog post where I was utilizing .NET Core I wanted to be able to utilize OpenCV. OpenCV is a library of functions that allow us to quickly perform computer vision tasks (e.g. making a picture black and white, canny edge, face recognition, …). But how do we utilize this in .NET Core?</summary></entry></feed>